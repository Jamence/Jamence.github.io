<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jamence&#39;s blog</title>
  
  <subtitle>everything is funny when you are exploring</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-17T14:53:14.661Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jamence</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>母函数</title>
    <link href="http://yoursite.com/2018/03/17/%E6%AF%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/03/17/母函数/</id>
    <published>2018-03-17T13:37:53.000Z</published>
    <updated>2018-03-17T14:53:14.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/17/母函数/index.jpg" alt="Uchiha Madara"></p><h1 id="母函数"><a href="#母函数" class="headerlink" title="母函数"></a>母函数</h1><h2 id="什么是母函数"><a href="#什么是母函数" class="headerlink" title="什么是母函数"></a>什么是母函数</h2><ul><li>普通型母函数</li></ul><p>对于如下等式：<br><code>(1+a1x)(1+a2x)···(1+a3x)</code>————————————————-（1）<br><code>=1+(a1+a2+···+an)x+(a1a2+a1a3+···+an-1an)x^2+···+a1a2···anx^n</code>–（2）<br>通过式（1），我们得到式（2），这就是母函数，在应用中，一般知道（1），我们通过（1），计算出（2）的系数。</p><p>对于序列a0,a1,a2,···构造一个函数：<br>G（x）=a0+a1x+a2X^2+···，<br>称函数G(x)是序列a0,a1,a2,···的母函数。</p><h2 id="母函数解决什么问题"><a href="#母函数解决什么问题" class="headerlink" title="母函数解决什么问题"></a>母函数解决什么问题</h2><p>我们举几个例子：</p><ul><li>若有1克，2克，3克，4克的砝码各一枚，能称出哪几种重量？各有几种可能方案？<br>我们假设x的指数表示称出的重量，<br>（1+x）表示一个1克砝码<br>（1+x^2）表示一个2克砝码<br>（1+x^3）表示一个3克砝码<br>（1+x^4）表示一个4克砝码<br><code>加上1的原因是可以选或者不选</code><br><code>(1+x)(1+x2)(1+x3)(1+x4)</code><br><code>=(1+x+x2+x3)(1+x3+x4+x7)</code><br><code>=1+x+x2+2x3+2x4+2x5+2x6+2x7+x8+x9+x10</code><br>于是我们知道称出5克砝码方案有2种，6克有2种，···</li><li>求使用1分，2分，3分的邮票贴出不同数值的方案数<br>由于允许重复，母函数为：<br>G(x)=(1+x+x2+···)(1+x2+x4+···)(1+x3+x6+···)</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">//普通型母函数</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int c1[1000], c2[1000];</span><br><span class="line">int val[1000],a[1000];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i, j, k;</span><br><span class="line">    while(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">       //这一段根据题意处理，主要处理每种的数量和这一种的价值</span><br><span class="line">        memset(c1, 0, sizeof(c1));</span><br><span class="line">        memset(c2, 0, sizeof(c2));</span><br><span class="line">        for(i = 0; i &lt;=n; ++i)//初始化第一个多项式</span><br><span class="line">        &#123;</span><br><span class="line">            c1[i]=1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i = 2; i &lt;=17; i++)//化简过程表示括号数量，从2开始，因为第一个括号不用操作</span><br><span class="line">        &#123;</span><br><span class="line">            for(j = 0; j &lt;=n; j++)//判断左边</span><br><span class="line">            &#123;</span><br><span class="line">                for(k = 0; j+ k&lt;=n; k+=val[i])//这个循环的限制条件根据题意而变，判断右边</span><br><span class="line">                &#123;</span><br><span class="line">                    c2[j + k] += c1[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for(j = 0; j &lt;=n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                c1[j] = c2[j];</span><br><span class="line">                c2[j] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,c1[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指数型母函数</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 100;</span><br><span class="line">double c1[N], c2[N],a[N];</span><br><span class="line">int val[N];</span><br><span class="line">void Factorial()</span><br><span class="line">&#123;</span><br><span class="line">    a[0]=1;</span><br><span class="line">    a[1]=1;</span><br><span class="line">    for(int i = 2; i &lt;=20; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a[i-1]*i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m, i, j, k;</span><br><span class="line">    Factorial();</span><br><span class="line">    while(~scanf(&quot;%d%d&quot;, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        for(i = 0; i &lt; n; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        memset(c1, 0, sizeof(c1));</span><br><span class="line">        memset(c2, 0, sizeof(c2));</span><br><span class="line"></span><br><span class="line">        for(i = 0; i &lt;= val[0]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            c1[i] = 1.0/a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for(i = 1; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(j = 0; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                for(k = 0; k + j &lt;= m &amp;&amp; k &lt;= val[i]; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    c2[j + k] += c1[j]/a[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for(j = 0; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                c1[j] = c2[j];</span><br><span class="line">                c2[j] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%.0lf\n&quot;, c1[m]*a[m]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/17/母函数/index.jpg&quot; alt=&quot;Uchiha Madara&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;母函数&quot;&gt;&lt;a href=&quot;#母函数&quot; class=&quot;headerlink&quot; title=&quot;母函数&quot;&gt;&lt;/a&gt;母函数&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="母函数" scheme="http://yoursite.com/tags/%E6%AF%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>素数筛法</title>
    <link href="http://yoursite.com/2018/03/17/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/17/素数筛法/</id>
    <published>2018-03-17T13:17:46.000Z</published>
    <updated>2018-03-17T13:33:31.670Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/17/素数筛法/index.jpg" alt="Uchiha Madara"></p><h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><blockquote><p>质数（prime number）又称素数，有无限个。<br>质数定义为在大于1的自然数中，除了1和它本身以外不再有其他因数。</p></blockquote><p>我们对于素数的判定的确经过了几个过程。<br>我们一个一个来讨论</p><h1 id="按照定义"><a href="#按照定义" class="headerlink" title="按照定义"></a>按照定义</h1><p>我们按照定义来实现找出素数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int flag=0;</span><br><span class="line">if(n&lt;2)flag=1;</span><br><span class="line">for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">  if(n%i==0)&#123;</span><br><span class="line">    flag=1;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag)cout&lt;&lt;&quot;不是素数&quot;&lt;&lt;endl;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;&quot;是素数&quot;&lt;&lt;endl;</span><br></pre></td></tr></table></figure></p><p>通过定义来实现素数的判定。<br>优点是比较好理解，<br>缺点是时间复杂度比较高</p><h1 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">memset(vis,0,sizeof(vis));</span><br><span class="line">for(int i=2;i&lt;=n;i++)</span><br><span class="line">for(int j=i*2;j&lt;=n;j+=i)</span><br><span class="line">vis[j]=1;</span><br><span class="line"></span><br><span class="line">//优化</span><br><span class="line">int m=sqrt(n+0.5);</span><br><span class="line">memset(vis,0,sizeof(vis));</span><br><span class="line">for(int i=2;i&lt;=m;i++)</span><br><span class="line">if(!vis[i])</span><br><span class="line">for(int j=i*i;j&lt;=n;j+=i)</span><br><span class="line">vis[j]=1;</span><br></pre></td></tr></table></figure><p>这是一种求素数比较方便并且快速的方法。<br>具体思想是<br>筛去2，3，5，7等等的倍数，那么剩余的便是合数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/17/素数筛法/index.jpg&quot; alt=&quot;Uchiha Madara&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;素数&quot;&gt;&lt;a href=&quot;#素数&quot; class=&quot;headerlink&quot; title=&quot;素数&quot;&gt;&lt;/a&gt;素数&lt;/h1&gt;&lt;blockq
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>大数运算</title>
    <link href="http://yoursite.com/2018/03/15/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2018/03/15/大数运算/</id>
    <published>2018-03-15T13:06:34.000Z</published>
    <updated>2018-03-16T15:51:03.109Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/15/大数运算/index.jpg" alt="Ōtsutsuki Naruto"><br>我们知道任何数值都有范围一说，c++肯定也一样<br><code>int</code>表示32为整数<br><code>longlong</code>表示64位整数<br>数值过大就会存在溢出的情况<br>怎么办？<br><strong>大数教你做人</strong></p><h1 id="大数加"><a href="#大数加" class="headerlink" title="大数加"></a>大数加</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string add(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    int len1=a.length();</span><br><span class="line">    int len2=b.length();</span><br><span class="line">    int len=max(len1,len2);</span><br><span class="line">    for(int i=len1;i&lt;len;i++)</span><br><span class="line">        a=&quot;0&quot;+a;</span><br><span class="line">    for(int i=len2;i&lt;len;i++)</span><br><span class="line">        b=&quot;0&quot;+b;</span><br><span class="line">    int ok=0;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        char temp=a[i]+b[i]-&apos;0&apos;+ok;</span><br><span class="line">        if(temp&gt;&apos;9&apos;)</span><br><span class="line">        &#123;</span><br><span class="line">            ok=1;</span><br><span class="line">            temp-=10;</span><br><span class="line">        &#125;</span><br><span class="line">        else ok=0;</span><br><span class="line">        c=temp+c;</span><br><span class="line">    &#125;</span><br><span class="line">    if(ok) c=&quot;1&quot;+c;</span><br><span class="line">    int pos=-1;</span><br><span class="line">    for(int i=0;i&lt;c.length();i++)&#123;</span><br><span class="line">    if(c[i]==&apos;0&apos;)pos=i;</span><br><span class="line">    else</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">//    cout&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">if(pos==c.length()-1)return &quot;0&quot;;</span><br><span class="line">    return c.substr(pos+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大数加法只是实现了简单的加减运算，记录每一位相加的结果（总的结果对10取余）以及进位（总的结果除以10）</p><h1 id="大数减"><a href="#大数减" class="headerlink" title="大数减"></a>大数减</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">string sub(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    bool ok=0;</span><br><span class="line">    int len1=a.length();</span><br><span class="line">    int len2=b.length();</span><br><span class="line">    int len=max(len1,len2);</span><br><span class="line">    for(int i=len1;i&lt;len;i++)</span><br><span class="line">        a=&quot;0&quot;+a;</span><br><span class="line">    for(int i=len2;i&lt;len;i++)</span><br><span class="line">        b=&quot;0&quot;+b;</span><br><span class="line">    if(a&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        string temp=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">        ok=1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[i]&lt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i-1]-=1;</span><br><span class="line">            a[i]+=10;</span><br><span class="line">        &#125;</span><br><span class="line">        char temp=a[i]-b[i]+&apos;0&apos;;</span><br><span class="line">        c=temp+c;</span><br><span class="line">    &#125;</span><br><span class="line">    int pos=0;</span><br><span class="line">    while(c[pos]==&apos;0&apos; &amp;&amp; pos&lt;len) pos++;</span><br><span class="line">    if(pos==len) return &quot;0&quot;;</span><br><span class="line">    if(ok) return &quot;-&quot;+c.substr(pos);</span><br><span class="line">    return c.substr(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大数加法和大数减法类似，如果对应位相减是负数，那么被减数的对应位数字前高一位减1，对应位加10。这是被减数减去减数就是存在的。</p><h1 id="大数乘"><a href="#大数乘" class="headerlink" title="大数乘"></a>大数乘</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string mul(string a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    char s;</span><br><span class="line">    int len=a.length();</span><br><span class="line">    int ok=0;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        int temp=(a[i]-&apos;0&apos;)*b+ok;</span><br><span class="line">        ok=temp/10;</span><br><span class="line">        s=temp%10+&apos;0&apos;;</span><br><span class="line">        c=s+c;</span><br><span class="line">    &#125;</span><br><span class="line">    while(ok)</span><br><span class="line">    &#123;</span><br><span class="line">        s=ok%10+&apos;0&apos;;</span><br><span class="line">        c=s+c;</span><br><span class="line">        ok/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们假设<code>a*b</code><br>类似于大数加法运算，a的每一位数字乘上b得到结果的当前位的初始值，当前位初始值对10取模得到结果的当前位。同时进位等于当前位初始值加上进位。<br>我们假设<code>12345*12</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  12</span><br><span class="line">* 12</span><br><span class="line">每一位的初始值等于</span><br><span class="line">12 24</span><br><span class="line">我们从右向左对十取模并且得到进位，将进位加到高一位的位置。</span><br><span class="line">那么有</span><br><span class="line">第一步：4（进位为2）</span><br><span class="line">第二步：12+2 4</span><br><span class="line">第三步：1 4 4</span><br><span class="line">结果就是144</span><br></pre></td></tr></table></figure></p><h1 id="大数除"><a href="#大数除" class="headerlink" title="大数除"></a>大数除</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string div(string a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    int len=a.length();</span><br><span class="line">    int ans=0;</span><br><span class="line">    char s;</span><br><span class="line">    for(int i=0;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=ans*10+a[i]-&apos;0&apos;;</span><br><span class="line">        s=ans/b+&apos;0&apos;;</span><br><span class="line">        ans%=b;</span><br><span class="line">        c+=s;</span><br><span class="line">    &#125;</span><br><span class="line">    int pos=0;</span><br><span class="line">    while(pos&lt;len &amp;&amp; c[pos]==&apos;0&apos;) pos++;</span><br><span class="line">    if(pos==len) return &quot;0&quot;;</span><br><span class="line">    return c.substr(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是模拟数式运算的一种实现方法。<br>大家可以自己尝试一下。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>前导零</li><li>相加后的结果字长</li><li>字符串中存储的每一位的数字和我们已知的十进制表示法相反，也就是说高位在前，低位在后，而我们进行加减运算列等式的时候是低位对其进行计算，所以在计算前我们需要转换字符串的字符位置。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/15/大数运算/index.jpg&quot; alt=&quot;Ōtsutsuki Naruto&quot;&gt;&lt;br&gt;我们知道任何数值都有范围一说，c++肯定也一样&lt;br&gt;&lt;code&gt;int&lt;/code&gt;表示32为整数&lt;br&gt;&lt;code&gt;longlong&lt;/co
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="大数" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>背包</title>
    <link href="http://yoursite.com/2018/03/10/%E8%83%8C%E5%8C%85/"/>
    <id>http://yoursite.com/2018/03/10/背包/</id>
    <published>2018-03-10T11:49:51.000Z</published>
    <updated>2018-03-17T13:19:07.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h1><p><img src="/2018/03/10/背包/index.jpg" alt="Uchiha Madara"></p><h2 id="背包简介"><a href="#背包简介" class="headerlink" title="背包简介"></a>背包简介</h2><p>问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。<br>我们讨论三种背包方式。</p><ul><li>01背包</li><li>完全背包</li><li>多重背包<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2></li><li>01背包</li></ul><blockquote><p>有n个重量和价值分别为Wi，vi的物品，从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。</p></blockquote><p>我们设置状态转移方程<br>dp[i][j]表示前i个物品在总重量小于等于j的情况下挑选的价值总和最大值。<br>那么存在一个转移方程<br><code>dp[i][j]=max(dp[i-1][j],dp[i-1][j-wi]+vi)</code><br>如何理解呢？<br>我们通过前i-1个物品推导出前i个物品的转移方程，<br>如果我们取第i个物品，<br><code>dp[i][j]=dp[i-1][j-wi]+vi</code><br>如果我们不取第i个物品，<br><code>dp[i][j]=dp[i-1][j]</code><br>我们可以通过逆序来压缩掉一维空间<br><code>dp[j]=max(dp[j],dp[j-wi]+vi)</code><br>因为dp[j-wi]+vi此时保存的是dp[i-1][j-wi]+vi</p><ul><li>完全背包</li></ul><blockquote><p>有n种重量和价值分别为wi，vi的物品。从这些物品中挑选总质量不超过W的物品，求出挑选物品质量价值总和的最大值。在这里，每种物品可以挑选任意多件。</p></blockquote><p>其实01背包针对的问题是咱们每个物品只能挑选一次，而完全背包则是每个物品我们可以挑选任意多次。<br>那么我们的状态状态转移方程可以写成：<br><code>dp[i][j]=max(dp[i-1][j-k*wi]+k*vi)k大于等于0，且k*wi小于j</code><br>我们可以将其优化为：<br><code>dp[i][j]=max(dp[i][j],dp[i-1][j-wi]+vi)</code><br>此时我们也可以降掉一维空间。<br>使其满足<br>``dp[j]=max(dp[j],dp[j-wi]+vi)</p><ul><li>多重背包</li></ul><blockquote><p>有n种重量和价值分别为wi，vi的物品。从这些物品中挑选总质量不超过W的物品，求出挑选物品质量价值总和的最大值。在这里，每种物品最多可以挑选ni件。</p></blockquote><p>其实这也是01背包的变形。<br><code>dp[i][j]=max(dp[i-1][j-k*wi]+k*vi)0&lt;=k&lt;=ni，且k*wi小于j</code><br>同时我们也可以通过二进制压缩来减小k的值。<br>如果我们不进行压缩，我们需要遍历ni次<br>如果我们进行压缩，那么我们需要遍历<code>log(ni)</code>次。<br>二进制压缩的思想是将k分成2，4，8，16等等部分。<br>假设k=10；<br>我们分为2，4，4一共三份，(最后一份是10-2-4)<br>那么此时<br>2-》<code>wi</code>等同于<code>2*wi</code>，<code>vi</code>等同于<code>2*vi</code><br>4-》<code>wi</code>等同于<code>4*wi</code>，<code>vi</code>等同于<code>4*vi</code><br>4-》<code>wi</code>等同于<code>4*wi</code>，<code>vi</code>等同于<code>4*vi</code><br>每一个部分记录它的质量和体积，等同于多加了三个01背包的部分。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">c[i]表示体积</span><br><span class="line">w[i]表示重量</span><br><span class="line">//01背包</span><br><span class="line">for(int i=0;i&lt;N:i++)&#123;</span><br><span class="line">    for(int j=V;j&gt;=c[i];j--)</span><br><span class="line">        f[j]=max(f[j],f[j-c[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">//完全背包</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">    for(int j=c[i];j&lt;=V;j++)</span><br><span class="line">        f[j]=max(f[j],f[j-c[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">//多重背包</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">    for(int k=1;k&lt;n[i];n[i]-=k,k&lt;&lt;=1)</span><br><span class="line">        for(int j=V;j&gt;=k*c[i];j--)</span><br><span class="line">            f[j]=max(f[j],f[j-k*c[i]]+k*w[i]);</span><br><span class="line">    for(int j=V;j&gt;=n[i]*c[i];j--)</span><br><span class="line">        f[j]=max(f[j],f[j-n[i]*c[i]]+n[i]*w[i]);</span><br><span class="line">&#125;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAXN = 101;</span><br><span class="line">const int SIZE = 50001;</span><br><span class="line"></span><br><span class="line">int dp[SIZE];</span><br><span class="line">int volume[MAXN], value[MAXN], c[MAXN];</span><br><span class="line">int n, v;           //  总物品数，背包容量</span><br><span class="line"></span><br><span class="line">//  01背包</span><br><span class="line">void ZeroOnepark(int val, int vol)</span><br><span class="line">&#123;</span><br><span class="line">    for (int j = v ; j &gt;= vol; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  完全背包</span><br><span class="line">void Completepark(int val, int vol)</span><br><span class="line">&#123;</span><br><span class="line">    for (int j = vol; j &lt;= v; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  多重背包</span><br><span class="line">void Multiplepark(int val, int vol, int amount)</span><br><span class="line">&#123;</span><br><span class="line">    if (vol * amount &gt;= v)</span><br><span class="line">    &#123;</span><br><span class="line">        Completepark(val, vol);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        int k = 1;</span><br><span class="line">        while (k &lt; amount)</span><br><span class="line">        &#123;</span><br><span class="line">            ZeroOnepark(k * val, k * vol);</span><br><span class="line">            amount -= k;</span><br><span class="line">            k &lt;&lt;= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (amount &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            ZeroOnepark(amount * val, amount * vol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; v)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 1 ; i &lt;= n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; volume[i] &gt;&gt; value[i] &gt;&gt; c[i];      //   费用，价值，数量</span><br><span class="line">        &#125;</span><br><span class="line">        memset(dp, 0, sizeof(dp));</span><br><span class="line">        for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Multiplepark(value[i], volume[i], c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[v] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背包&quot;&gt;&lt;a href=&quot;#背包&quot; class=&quot;headerlink&quot; title=&quot;背包&quot;&gt;&lt;/a&gt;背包&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/03/10/背包/index.jpg&quot; alt=&quot;Uchiha Madara&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>考研规划</title>
    <link href="http://yoursite.com/2018/03/08/%E8%80%83%E7%A0%94%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2018/03/08/考研规划/</id>
    <published>2018-03-08T11:30:23.000Z</published>
    <updated>2018-03-08T15:27:11.491Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/08/考研规划/index.gif" alt="Uzumaki Naruto "></p><h1 id="高数："><a href="#高数：" class="headerlink" title="高数："></a>高数：</h1><table><thead><tr><th>阶段</th><th style="text-align:center">复习教材以及习题</th><th style="text-align:right">时间</th></tr></thead><tbody><tr><td>基础巩固</td><td style="text-align:center">数学教材（高数概率论线代）+张宇36讲</td><td style="text-align:right">3-&gt;6月</td></tr></tbody></table><ul><li>基础巩固<br>数学根据去年（2018年）大纲来复习书上的内容<br>张宇36讲配套教材来吃透教材，形成知识链<br>不要<strong><em>急</em></strong>，时间来得及</li></ul><h1 id="英语："><a href="#英语：" class="headerlink" title="英语："></a>英语：</h1><table><thead><tr><th>阶段</th><th style="text-align:center">复习教材以及习题</th><th style="text-align:right">时间</th></tr></thead><tbody><tr><td>基础巩固</td><td style="text-align:center">单词+阅读+语法</td><td style="text-align:right">3-&gt;6月</td></tr></tbody></table><ul><li>基础巩固<br>单词：恋练有词，希望可以过多边单词书<br>阅读：我还是使用扇贝阅读，阅读需要配套翻译<br>语法：刘晓艳长难句<br>不要急，基础是重点，高楼平地起，没有基础，便没有提高</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/08/考研规划/index.gif&quot; alt=&quot;Uzumaki Naruto &quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;高数：&quot;&gt;&lt;a href=&quot;#高数：&quot; class=&quot;headerlink&quot; title=&quot;高数：&quot;&gt;&lt;/a&gt;高数：&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Lifes" scheme="http://yoursite.com/categories/Lifes/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="http://yoursite.com/2018/03/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/03/08/拓扑排序/</id>
    <published>2018-03-07T16:04:36.000Z</published>
    <updated>2018-03-09T12:58:16.717Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/08/拓扑排序/index.jpg" alt="Uchiha Itachi"></p><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><blockquote><p>在计算机科学领域，有向图的拓扑排序或拓扑排序是其顶点的线性排序，使得对于从顶点u到顶点v的每个有向边  uv,u 在排序中都在v之前。 例如，图形的顶点可以表示要执行的任务，并且边缘可以表示一个任务必须在另一个任务之前执行的约束; 在这个应用中，拓扑排序只是一个有效的任务顺序。 如果且仅当图形没有定向循环，即如果它是有向无环图（DAG），则拓扑排序是可能的。 任何 DAG 具有至少一个拓扑排序，并且已知这些算法用于在线性时间内构建任何 DAG 的拓扑排序。</p><p>在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序（英语：Topological sorting）。<br>每个顶点出现且只出现一次；</p><p>若A在序列中排在B的前面，则在图中不存在从B到A的路径。<br>也可以定义为：拓扑排序是对有向无环图的顶点的一种排序，它使得如果存在一条从顶点A到顶点B的路径，那么在排序中B出现在A的后面。(转自<a href="https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">维基百科</a>)</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>我们一般存在两种算法实现方法</p><ul><li>dfs</li></ul><p>其实DFS就是深度优先搜索，它每次都沿着一条路径一直往下搜索，知道某个顶点没有了出度时，就停止递归，往回走，所以我们就用DFS的这个思路，我们可以得到一个有向无环图的拓扑序列，其实DFS很像Kahn算法的逆过程。</p><ul><li>根据出入度（称之为Kahn算法）</li></ul><p>在有向图中选一个没有前驱的顶点并且输出<br>从图中删除该顶点和所有以它为尾的弧（白话就是：删除所有和它有关的边）<br>重复上述两步，直至所有顶点输出，或者当前图中不存在无前驱的顶点为止，后者代表我们的有向图是有环的，因此，也可以通过拓扑排序来判断一个图是否有环。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//使用dfs</span><br><span class="line">int n, G[maxn][maxn], c[maxn], topo[maxn], t;</span><br><span class="line">/*</span><br><span class="line"> *n表示邻接表的个数，</span><br><span class="line"> *c[]表示状态，为1表示访问过，为0表示未访问，为-1表示正在访问</span><br><span class="line"> *topo表示排完序的拓扑序列</span><br><span class="line"> */</span><br><span class="line">bool dfs(int u)&#123;</span><br><span class="line">c[u] = -1;</span><br><span class="line">for(int v = 0; v &lt; n; v++) if(G[u][v]) &#123;</span><br><span class="line">if(c[v]&lt;0)</span><br><span class="line">return false;</span><br><span class="line">//表示v也在被访问，说明u和v在一个环中，说明输入数据有问题，非DAG</span><br><span class="line">else if(!c[v]&amp;&amp;!dfs(v))</span><br><span class="line">return false;</span><br><span class="line">//说明v没有被访问，但是以v为起始节点的时候，v存在环。</span><br><span class="line">&#125;</span><br><span class="line">c[u] = 1; topo[--t]=u;</span><br><span class="line">//深搜到最后一个u的时候，topo[n-1]赋值为u</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool toposort()&#123;</span><br><span class="line">t = n;</span><br><span class="line">memset(c, 0, sizeof(c));</span><br><span class="line">for(int u = 0; u &lt; n; u++) if(!c[u])</span><br><span class="line">if(!dfs(u)) return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//////////////////////////////////////</span><br><span class="line">//使用出度入度的思想</span><br><span class="line">int G[MAXN][MAXN];//路径</span><br><span class="line">int in_degree[MAXN];//入度</span><br><span class="line">int ans[MAXN];//路径</span><br><span class="line">int n;//顶点</span><br><span class="line">void toposort()</span><br><span class="line">&#123;</span><br><span class="line">for(i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j = 1; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">if(G[i][j])</span><br><span class="line">&#123;</span><br><span class="line">in_degree[j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(i = 1; i &lt;= n; i++)//从最小的开始寻找，</span><br><span class="line">&#123;//这样保证了有多个答案时序号小的先输出</span><br><span class="line">int k = 1;</span><br><span class="line">while(in_degree[k] != 0)//寻找入度为零的点</span><br><span class="line">k++;</span><br><span class="line">ans[i] = k;</span><br><span class="line">in_degree[k] = -1;</span><br><span class="line">//更新为-1，后边检测不受影响，相当于删除节点</span><br><span class="line">for(int j = 1; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">if(G[k][j])</span><br><span class="line">in_degree[j]--;//相关联的入度减1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/08/拓扑排序/index.jpg&quot; alt=&quot;Uchiha Itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;拓扑排序&quot;&gt;&lt;a href=&quot;#拓扑排序&quot; class=&quot;headerlink&quot; title=&quot;拓扑排序&quot;&gt;&lt;/a&gt;拓扑排序&lt;/h1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://yoursite.com/2018/03/08/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2018/03/08/最小生成树/</id>
    <published>2018-03-07T16:03:34.000Z</published>
    <updated>2018-03-08T15:28:40.338Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/08/最小生成树/index.jpg" alt="Uchiha Itachi"></p><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p>一个有 n 个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。 最小生成树可以用kruskal（克鲁斯卡尔）算法或prim（普里姆）算法求出。简言之就是在一个连通图中找出一些边使得所有节点联通。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>虽然有很多可以实现最小生成树的算法，我们只讨论Kruskal算法。</p><h3 id="Kruskal（克鲁斯科尔算法）"><a href="#Kruskal（克鲁斯科尔算法）" class="headerlink" title="Kruskal（克鲁斯科尔算法）"></a>Kruskal（克鲁斯科尔算法）</h3><p>该算法算是贪心算法的引用</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li>新建图G，G中拥有原图中相同的节点，但没有边</li><li>将原图中所有的边按权值从小到大排序</li><li>从权值最小的边开始，如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中</li><li>重复3，直至图G中所有的节点都在同一个连通分量中<h2 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h2>我们间接通过并查集来实现判断是否两个节点存在于同一个连通分量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">int f[maxn];</span><br><span class="line">int find(int u)&#123;</span><br><span class="line">    if(u==f[u])return u;</span><br><span class="line">    f[u]=find(f[u]);</span><br><span class="line">    return f[u];</span><br><span class="line">&#125;</span><br><span class="line">void join(int u,int v)&#123;</span><br><span class="line">    int fu=find(u);</span><br><span class="line">    int fv=find(v);</span><br><span class="line">    if(fu!=fv)&#123;</span><br><span class="line">        f[fu]=fv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">struct edge&#123;</span><br><span class="line">    int from,to,cost;</span><br><span class="line">    friend bool operator &lt;(edge a,edge b)&#123;</span><br><span class="line">        return a.cost&lt;b.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Ed[maxn];</span><br><span class="line">int V,E;</span><br><span class="line">int kruskal()&#123;</span><br><span class="line">    sort(Ed,Ed+E);</span><br><span class="line">    iniuni(V);</span><br><span class="line">    int res=0;</span><br><span class="line">    for(int i=0;i&lt;E;i++)&#123;</span><br><span class="line">        edge e=Ed[i];</span><br><span class="line">        int fu=find(Ed[i].from);</span><br><span class="line">        int fv=find(Ed[i].to);</span><br><span class="line">        if(fu!=fv)&#123;</span><br><span class="line">            join(e.from,e.to);</span><br><span class="line">            res+=e.cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/08/最小生成树/index.jpg&quot; alt=&quot;Uchiha Itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;最小生成树&quot;&gt;&lt;a href=&quot;#最小生成树&quot; class=&quot;headerlink&quot; title=&quot;最小生成树&quot;&gt;&lt;/a&gt;最小生成
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="最小生成树" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://yoursite.com/2018/03/07/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2018/03/07/并查集/</id>
    <published>2018-03-07T00:06:19.000Z</published>
    <updated>2018-03-07T00:32:19.880Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/07/并查集/index.jpg" alt="Uchiha Itachi"></p><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h2><p>在计算机科学中，并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作：</p><ul><li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li><li>Union：将两个子集合并成同一个集合。</li></ul><p>由于支持这两种操作，一个不相交集也常被称为联合-查找数据结构（union-find data structure）或合并-查找集合（merge-find set）。其他的重要方法，MakeSet，用于建立单元素集合。有了这些方法，许多经典的划分问题可以被解决。</p><p>为了更加精确的定义这些方法，需要定义如何表示集合。一种常用的策略是为每个集合选定一个固定的元素，称为代表，以表示整个集合。接着，Find(x) 返回 x 所属集合的代表，而 Union 使用两个集合的代表作为参数。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>用集合中的某个元素来代表这个集合，该元素称为集合的代表元。<br>一个集合内的所有元素组织成以代表元为根的树形结构。<br>在并查集算法中，合并操作是将该元素所在树连接在被合并元素所在树上。<br>对于查找操作，即是路经查找到树根，确定代表元的过程。</p><blockquote><p>判断两个元素是否属于同一集合，只需要看他们的代表元是否相同即可。</p></blockquote><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>存在两种优化算法：</p><ul><li>按秩合并：使包含较少结点的树根指向包含较多结点的树根。</li><li>路径压缩：使路径查找上的每个点都直接指向根结点。<h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3>是一种在执行“查找”时扁平化树结构的方法。关键在于在路径上的每个节点都可以直接连接到根上；他们都有同样的表示方法。为了达到这样的效果，Find递归地经过树，改变每一个节点的引用到根节点。得到的树将更加扁平，为以后直接或者间接引用节点的操作加速。<br>关键代码在find<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int find(int u)&#123;</span><br><span class="line">    if(u==f[u])return u;</span><br><span class="line">    f[u]=find(f[u]);</span><br><span class="line">    return f[u];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="完整代码描述"><a href="#完整代码描述" class="headerlink" title="完整代码描述"></a>完整代码描述</h2><ul><li>递归版本(存在溢出的情况)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int f[maxn];</span><br><span class="line">int find(int u)&#123;</span><br><span class="line">    if(u==f[u])return u;</span><br><span class="line">    f[u]=find(f[u]);</span><br><span class="line">    return f[u];</span><br><span class="line">&#125;</span><br><span class="line">void join(int u,int v)&#123;</span><br><span class="line">    int fu=find(u);</span><br><span class="line">    int fv=find(v);</span><br><span class="line">    if(fu!=fv)&#123;</span><br><span class="line">        f[fu]=fv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非递归版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int pre[1000 ];</span><br><span class="line">void ini()//初始化，表示每个结点的父节点是其本身</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;maxn;i++)</span><br><span class="line">pre[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)//查找根节点</span><br><span class="line">&#123;</span><br><span class="line">    int r=x;</span><br><span class="line">    while ( pre[r] != r )//返回根节点 r</span><br><span class="line">          r=pre[r];</span><br><span class="line"></span><br><span class="line">    int i=x,j;</span><br><span class="line">    while(i!=r) //路径压缩</span><br><span class="line">    &#123;</span><br><span class="line">         j = pre[i]; //在改变上级之前用临时变量  j 记录下他的值</span><br><span class="line">         pre[i]= r ; //把上级改为根节点</span><br><span class="line">         i=j;</span><br><span class="line">    &#125;</span><br><span class="line">    return r ;</span><br><span class="line">&#125;</span><br><span class="line">void join(int x,int y)//判断x y是否连通，</span><br><span class="line">//如果已经连通，就不用管了 如果不连通，就把它们所在的连通分支合并起,</span><br><span class="line">&#123;</span><br><span class="line">    int fx=find(x),fy=find(y);</span><br><span class="line">    if(fx!=fy)</span><br><span class="line">        pre[fx]=fy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/07/并查集/index.jpg&quot; alt=&quot;Uchiha Itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>最短路算法</title>
    <link href="http://yoursite.com/2018/02/27/%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/02/27/最短路算法/</id>
    <published>2018-02-27T12:26:01.000Z</published>
    <updated>2018-03-01T07:38:12.145Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/27/最短路算法/index.jpg" alt="uchiha itachi"></p><h1 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h1><h2 id="松弛操作"><a href="#松弛操作" class="headerlink" title="松弛操作"></a>松弛操作</h2><blockquote><p>松弛：v-&gt;w的距离可以通过p点来缩短，即<br><code>dis（v,w）&lt;dis(v,p)+dis(p,w)</code></p></blockquote><h2 id="Dijkstra算法（单源最短路）"><a href="#Dijkstra算法（单源最短路）" class="headerlink" title="Dijkstra算法（单源最短路）"></a>Dijkstra算法（单源最短路）</h2><h3 id="维基简介："><a href="#维基简介：" class="headerlink" title="维基简介："></a>维基简介：</h3><blockquote><p>戴克斯特拉算法（英语：Dijkstra’s algorithm）由荷兰计算机科学家艾兹赫尔·戴克斯特拉在1956年提出。迪科斯特拉算法使用了广度优先搜索解决赋权有向图的单源最短路径问题。该算法存在很多变体；戴克斯特拉的原始版本找到两个顶点之间的最短路径，但是更常见的变体固定了一个顶点作为源节点然后找到该顶点到图中所有其它节点的最短路径，产生一个最短路径树。该算法常用于路由算法或者作为其他图算法的一个子模块。举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。</p></blockquote><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><blockquote><p>这个算法是通过为每个顶点 v 保留目前为止所找到的从s到v的最短路径来工作的。初始时，原点 s 的路径权重被赋为 0 （d[s] = 0）。若对于顶点 s 存在能直接到达的边（s,m），则把d[m]设为w（s, m）,同时把所有其他（s不能直接到达的）顶点的路径长度设为无穷大，即表示我们不知道任何通向这些顶点的路径（对于所有顶点的集合 V 中的任意顶点 v， 若 v 不为 s 和上述 m 之一， d[v] = ∞）。当算法结束时，d[v] 中存储的便是从 s 到 v 的最短路径，或者如果路径不存在的话是无穷大。</p><p>边的拓展是Dijkstra 算法的基础操作：如果存在一条从 u 到 v 的边，那么从 s 到 v 的最短路径可以通过将边（u, v）添加到尾部来拓展一条从 s 到 v 的路径。这条路径的长度是 d[u] + w(u, v)。如果这个值比目前已知的 d[v] 的值要小，我们可以用新值来替代当前 d[v] 中的值。拓展边的操作一直运行到所有的 d[v] 都代表从 s 到 v 的最短路径的长度值。此算法的组织令 d[u] 达到其最终值时，每条边（u, v）都只被拓展一次。</p></blockquote><p><strong><em> 说人话！！！ </em></strong><br>就是我们通过bfs遍历每一个点（通过边），当遍历到u点时，我们已知u点的邻边以及邻边的另一端的顶点v。我们通过u点来更新s到v的距离。<br>代码描述就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(dis[v]&lt;dis[u]+edge(u,v))&#123;</span><br><span class="line">  dis[v]=dis[u]+edge(u,v);</span><br><span class="line">  //edge(u,v)表示u，v间边的距离。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=1e4+10;</span><br><span class="line">const int INF=0x3f3f3f3f;</span><br><span class="line">struct edge&#123;</span><br><span class="line">    int to,cost;</span><br><span class="line">    edge(int to,int cost)&#123;</span><br><span class="line">        this-&gt;to=to;</span><br><span class="line">        this-&gt;cost=cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">typedef pair&lt;int,int&gt;point;</span><br><span class="line">int dis[maxn];</span><br><span class="line">vector&lt;edge&gt;Ed[maxn];</span><br><span class="line">void addEdge(int u,int v,int value)&#123;</span><br><span class="line">    Ed[u].push_back(edge(v,value));</span><br><span class="line">&#125;</span><br><span class="line">void Dijkstra(int s,int n)&#123;</span><br><span class="line">    for(int i=0;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=0;</span><br><span class="line">    priority_queue&lt;point,vector&lt;point&gt;,greater&lt;point&gt; &gt;q;</span><br><span class="line">    q.push(point(dis[s],s));</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        point cur=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        int v=cur.second;</span><br><span class="line">        for(int i=0;i&lt;Ed[v].size();i++)&#123;</span><br><span class="line">            edge e=Ed[v][i];</span><br><span class="line">            if(dis[e.to]&gt;dis[v]+e.cost)&#123;</span><br><span class="line">                dis[e.to]=dis[v]+e.cost;</span><br><span class="line">                q.push(point(dis[e.to],e.to));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spfa算法（单源最短路并且判负环）"><a href="#spfa算法（单源最短路并且判负环）" class="headerlink" title="spfa算法（单源最短路并且判负环）"></a>spfa算法（单源最短路并且判负环）</h2><h3 id="存在的原因"><a href="#存在的原因" class="headerlink" title="存在的原因"></a>存在的原因</h3><p>我们在使用Dijstra算法时，如果出现负环，我们无法得出正确答案。<br>我们来分析一下Dijstra算法的代码实现部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i=0;i&lt;Ed[v].size();i++)&#123;</span><br><span class="line">    edge e=Ed[v][i];</span><br><span class="line">    if(dis[e.to]&gt;dis[v]+e.cost)&#123;</span><br><span class="line">        dis[e.to]=dis[v]+e.cost;</span><br><span class="line">        q.push(point(dis[e.to],e.to));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们运行一下如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=1e4+10;</span><br><span class="line">const int INF=0x3f3f3f3f;</span><br><span class="line">struct edge&#123;</span><br><span class="line">    int to,cost;</span><br><span class="line">    edge(int to,int cost)&#123;</span><br><span class="line">        this-&gt;to=to;</span><br><span class="line">        this-&gt;cost=cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">typedef pair&lt;int,int&gt;point;</span><br><span class="line">int dis[maxn];</span><br><span class="line">vector&lt;edge&gt;Ed[maxn];</span><br><span class="line">void addEdge(int u,int v,int value)&#123;</span><br><span class="line">    Ed[u].push_back(edge(v,value));</span><br><span class="line">&#125;</span><br><span class="line">void Dijkstra(int s,int n)&#123;</span><br><span class="line">    for(int i=0;i&lt;=n;i++)dis[i]=INF;</span><br><span class="line">    dis[s]=0;</span><br><span class="line">    priority_queue&lt;point,vector&lt;point&gt;,greater&lt;point&gt; &gt;q;</span><br><span class="line">    q.push(point(dis[s],s));</span><br><span class="line">    cout&lt;&lt;&quot;节点号：&quot;&lt;&lt;s&lt;&lt;&quot;        距离为&quot;&lt;&lt;dis[s]&lt;&lt;endl;</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        point cur=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        int v=cur.second;</span><br><span class="line">        for(int i=0;i&lt;Ed[v].size();i++)&#123;</span><br><span class="line">            edge e=Ed[v][i];</span><br><span class="line">            if(dis[e.to]&gt;dis[v]+e.cost)&#123;</span><br><span class="line">                dis[e.to]=dis[v]+e.cost;</span><br><span class="line">                q.push(point(dis[e.to],e.to));</span><br><span class="line">                cout&lt;&lt;&quot;节点号：&quot;&lt;&lt;e.to&lt;&lt;&quot;        距离为&quot;&lt;&lt;dis[e.to]&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    addEdge(0,1,2);</span><br><span class="line">    addEdge(1,0,2);</span><br><span class="line">    addEdge(0,2,1);</span><br><span class="line">    addEdge(2,0,1);</span><br><span class="line">    addEdge(1,2,-5);</span><br><span class="line">    addEdge(2,1,-5);</span><br><span class="line">    Dijkstra(0,3);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们构造了一个负环，（0，1，2）（无向图）<br>0号节点与1号节点相连，距离为2<br>0号节点与2号节点相连，距离为1<br>1号节点与2号节点相连，距离为-5<br>运行结果如图：<br><img src="/2018/02/27/最短路算法/1.PNG" alt="运行结果"><br>我们知道Dijkstra算法是通过不断更新相邻点的最小距离，由于存在负数，越更新，距离越小（负数越加越小），所以无法得出正确结论，甚至无法跳出循环。</p><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>其实和Dijkstra没有什么区别，只是加了判负环的操作。<br>判负环的操作：<br>我们一共有<code>n</code>个点，如果我们要得到最短路，不会有重复的路径。其次，对于一个点，与其相邻的最多有<code>n-1</code>个，即该点最多可以被更新<code>n-1</code>次。<br>所以，我们只需要记录一个点入栈多少次，如果大于<code>n-1</code>，（或者<code>n</code>）则一定存在负权还。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *  时间复杂度O(kE)</span><br><span class="line"> *  队列实现，有时候改成栈实现会更快，较容易修改</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">const int MAXN = 1010;</span><br><span class="line">const int INF = 0x3f3f3f3f;</span><br><span class="line"></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    int v;</span><br><span class="line">    int cost;</span><br><span class="line">    Edge(int _v = 0, int _cost = 0) : v(_v), cost(_cost) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Edge&gt; E[MAXN];</span><br><span class="line"></span><br><span class="line">void addEdge(int u, int v, int w)</span><br><span class="line">&#123;</span><br><span class="line">    E[u].push_back(Edge(v, w));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool vis[MAXN];     //  在队列标志</span><br><span class="line">int cnt[MAXN];      //  每个点的入列队次数</span><br><span class="line">int dist[MAXN];</span><br><span class="line"></span><br><span class="line">bool SPFA(int start, int n)</span><br><span class="line">&#123;</span><br><span class="line">    memset(vis, false, sizeof(vis));</span><br><span class="line">    memset(dist, 0x3f, sizeof(dist));</span><br><span class="line"></span><br><span class="line">    vis[start] = true;</span><br><span class="line">    dist[start] = 0;</span><br><span class="line">    queue&lt;int&gt; que;</span><br><span class="line"></span><br><span class="line">    while (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        que.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    que.push(start);</span><br><span class="line">    memset(cnt, 0, sizeof(cnt));</span><br><span class="line">    cnt[start] = 1;</span><br><span class="line"></span><br><span class="line">    while (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[u] = false;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; E[u].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int v = E[u][i].v;</span><br><span class="line">            if (dist[v] &gt; dist[u] + E[u][i].cost)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + E[u][i].cost;</span><br><span class="line">                if (!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = true;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                    if (++cnt[v] &gt; n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        return false;   //  cnt[i]为入队列次数，用来判定是否存在负环回路</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Floyd-Warshall算法（多源最短路）"><a href="#Floyd-Warshall算法（多源最短路）" class="headerlink" title="Floyd-Warshall算法（多源最短路）"></a>Floyd-Warshall算法（多源最短路）</h2><h3 id="维基简介"><a href="#维基简介" class="headerlink" title="维基简介"></a>维基简介</h3><blockquote><p>Floyd-Warshall算法（英语：Floyd-Warshall algorithm），中文亦称弗洛伊德算法，是解决任意两点间的最短路径的一种算法，可以正确处理有向图或负权（但不可存在负权回路）的最短路径问题，同时也被用于计算有向图的传递闭包。<br>Floyd-Warshall算法的时间复杂度为O(N^3)，空间复杂度为O(N2)。</p></blockquote><h3 id="算法描述-2"><a href="#算法描述-2" class="headerlink" title="算法描述"></a>算法描述</h3><p>Floyd-Warshall算法的原理是动态规划<br>我们假设<code>只使用顶点0~k和i，j的情况下，记录i到j的最短路长度为d[k+1][i][j]</code><br>所以d[0][i][j]表示不使用中间节点是i到j的距离，那么直接等于cost[i][j]<br>我们分成两种情况：</p><ul><li>不经过顶点k<br><code>d[k][i][j]=d[k-1][i][j];</code></li><li>经过顶点k<br><code>d[k][i][j]=d[k-1][i][k]+d[k-1][k][j];</code></li></ul><p>所以，我们可以得知<code>d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][j])</code>;<br>同时，我们可以去掉一维数组<br><code>d[i][j]=min(d[i][k],d[k][j])</code></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> *  Floyd算法，求从任意节点i到任意节点j的最短路径</span><br><span class="line"> *  cost[][]:初始化为INF（cost[i][i]：初始化为0）</span><br><span class="line"> *  lowcost[][]:最短路径，path[][]:最短路径（无限制）</span><br><span class="line"> */</span><br><span class="line">const int MAXN = 100;</span><br><span class="line"></span><br><span class="line">int cost[MAXN][MAXN];</span><br><span class="line">int lowcost[MAXN][MAXN];</span><br><span class="line">int path[MAXN][MAXN];</span><br><span class="line"></span><br><span class="line">void Floyd(int n)</span><br><span class="line">&#123;</span><br><span class="line">    memcpy(lowcost, cost, sizeof(cost));</span><br><span class="line">    memset(path, -1, sizeof(path));</span><br><span class="line"></span><br><span class="line">    for (int k = 0; k &lt; n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 0; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 0; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (lowcost[i][j] &gt; (lowcost[i][k] + lowcost[k][j]))</span><br><span class="line">                &#123;</span><br><span class="line">                    lowcost[i][j] = lowcost[i][k] + lowcost[k][j];</span><br><span class="line">                    path[i][j] = k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/27/最短路算法/index.jpg&quot; alt=&quot;uchiha itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;最短路算法&quot;&gt;&lt;a href=&quot;#最短路算法&quot; class=&quot;headerlink&quot; title=&quot;最短路算法&quot;&gt;&lt;/a&gt;最短路算
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>3月计划</title>
    <link href="http://yoursite.com/2018/02/26/3%E6%9C%88%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2018/02/26/3月计划/</id>
    <published>2018-02-26T15:27:43.000Z</published>
    <updated>2018-02-26T15:42:11.640Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/26/3月计划/index.jpeg" alt="刚吧爹,Jamence"></p><h2 id="需要准备的事情："><a href="#需要准备的事情：" class="headerlink" title="需要准备的事情："></a>需要准备的事情：</h2><ul><li>蓝桥杯<br>时间是2018年4月1日星期天</li><li>天梯赛<br>时间是2018年3月31日13:00——16:00</li><li>考研<h2 id="安排"><a href="#安排" class="headerlink" title="安排"></a>安排</h2></li><li>刷团队设计天梯赛往年的题目（认真刷level2的题目，lever3的题目写不来，level2的题目可以争取一下）</li><li>重新刷一遍杭电2000到2100的题目，并加以总结</li><li>刷一遍历届试题（<strong><em>重点刷这个</em></strong>）</li><li>算法归纳总结：</li></ul><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><ul><li style="list-style: none"><input type="checkbox"> dfs</li><li style="list-style: none"><input type="checkbox"> bfs</li><li style="list-style: none"><input type="checkbox"> 枚举</li></ul><h5 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h5><ul><li style="list-style: none"><input type="checkbox"> 贪心</li></ul><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><ul><li style="list-style: none"><input type="checkbox"> 简单DP（找规律）</li><li style="list-style: none"><input type="checkbox"> 背包</li><li style="list-style: none"><input type="checkbox"> 树形DP</li><li style="list-style: none"><input type="checkbox"> 数位DP</li></ul><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><ul><li style="list-style: none"><input type="checkbox"> 二叉树相关</li><li style="list-style: none"><input type="checkbox"> 优先队列相关</li><li style="list-style: none"><input type="checkbox"> 并查集</li><li style="list-style: none"><input type="checkbox"> 线段树</li></ul><h5 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h5><ul><li style="list-style: none"><input type="checkbox"> 最短路算法</li><li style="list-style: none"><input type="checkbox"> 最小生成树</li><li style="list-style: none"><input type="checkbox"> 拓扑排序</li></ul><h5 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h5><ul><li style="list-style: none"><input type="checkbox"> gcd</li><li style="list-style: none"><input type="checkbox"> 扩展gcd</li><li style="list-style: none"><input type="checkbox"> 素数相关</li><li style="list-style: none"><input type="checkbox"> 逆元</li><li style="list-style: none"><input type="checkbox"> 斯特林近似</li><li style="list-style: none"><input type="checkbox"> 快速幂</li><li style="list-style: none"><input type="checkbox"> 矩阵快速幂</li><li style="list-style: none"><input type="checkbox"> 卡塔兰数</li><li style="list-style: none"><input type="checkbox"> 一元线性同余方程</li></ul><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><ul><li style="list-style: none"><input type="checkbox"> kmp</li><li style="list-style: none"><input type="checkbox"> 字符串距离</li></ul><h5 id="代数几何"><a href="#代数几何" class="headerlink" title="代数几何"></a>代数几何</h5><ul><li style="list-style: none"><input type="checkbox"> 凸包</li><li style="list-style: none"><input type="checkbox"> 判断三点方向</li><li style="list-style: none"><input type="checkbox"> 多边形面积</li><li style="list-style: none"><input type="checkbox"> 最小点对</li><li style="list-style: none"><input type="checkbox"> 四点共面</li><li style="list-style: none"><input type="checkbox"> 多边形重心</li></ul><h5 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h5><ul><li style="list-style: none"><input type="checkbox"> 二分查找</li><li style="list-style: none"><input type="checkbox"> 尺取法</li><li style="list-style: none"><input type="checkbox"> 随机化算法</li></ul><h5 id="大数算法（蓝桥杯报了c-组，坑呀）"><a href="#大数算法（蓝桥杯报了c-组，坑呀）" class="headerlink" title="大数算法（蓝桥杯报了c++组，坑呀）"></a>大数算法（蓝桥杯报了c++组，坑呀）</h5><ul><li style="list-style: none"><input type="checkbox"> 加</li><li style="list-style: none"><input type="checkbox"> 减</li><li style="list-style: none"><input type="checkbox"> 乘</li></ul><h5 id="博弈"><a href="#博弈" class="headerlink" title="博弈"></a>博弈</h5><ul><li style="list-style: none"><input type="checkbox"> 简单博弈（三种）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/26/3月计划/index.jpeg&quot; alt=&quot;刚吧爹,Jamence&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;需要准备的事情：&quot;&gt;&lt;a href=&quot;#需要准备的事情：&quot; class=&quot;headerlink&quot; title=&quot;需要准备的事情：&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Lifes" scheme="http://yoursite.com/categories/Lifes/"/>
    
    
      <category term="计划" scheme="http://yoursite.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>c++继承之虚继承</title>
    <link href="http://yoursite.com/2018/02/26/c-%E7%BB%A7%E6%89%BF%E4%B9%8B%E8%99%9A%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/02/26/c-继承之虚继承/</id>
    <published>2018-02-26T12:43:12.000Z</published>
    <updated>2018-02-26T12:59:23.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/26/c-继承之虚继承/index.jpg" alt="Senju Tobirama"></p><h1 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h1><h2 id="存在的理由"><a href="#存在的理由" class="headerlink" title="存在的理由"></a>存在的理由</h2><blockquote><p>存在即合理</p></blockquote><p>虽然我们相信这句话，但是为什么合理呢？是什么促使它存在的呢？<br>我们引出一个概念，<em>菱形继承</em><br>什么是菱形继承：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class A  //大小为4</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">&#125;;</span><br><span class="line">class B : public A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line">class C : public A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int c;</span><br><span class="line">&#125;;</span><br><span class="line">class D :public B, public C</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们画出它的类图，会发现是一个菱形<br>当我们实例化D类,对象是d，并且调用d.a;<br>那么会出现<strong><em>二义性</em></strong>的问题。<br>通过引入虚函数，可以解决以下问题：</p><ul><li>二义性问题</li><li>浪费存储空间</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>每个虚继承的子类都有一个虚基类指针（占用一个指针的存储空间，4字节）和虚基类表（不占用类对象的存储空间）</li><li>虚基类依旧会在子类里面存在拷贝，只是仅仅最多存在一份而已，并不是不在子类里面了</li><li>当虚继承的子类被当做父类继承时，虚基类指针也会被继承。</li><li>实际上，vbptr指的是虚基类表指针（virtual base table pointer），该指针指向了一个虚基类表（virtual table），虚表中记录了虚基类与本类的偏移地址；通过偏移地址，这样就找到了虚基类成员，而虚继承也不用像普通多继承那样维持着公共基类（虚基类）的两份同样的拷贝，节省了存储空间。</li><li>我的理解是通过偏移地址，找到虚基类成员，如果两个父类的父类是一个类，类似于B的父类是A，C的父类是A，B，C父类相同，那么我们不需要两份相同的继承。</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int a;</span><br><span class="line">&#125;;</span><br><span class="line">class B :virtual public A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int b;</span><br><span class="line">&#125;;</span><br><span class="line">class C :virtual public A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int c;</span><br><span class="line">&#125;;</span><br><span class="line">class D :public B, public C</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意virtual的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/26/c-继承之虚继承/index.jpg&quot; alt=&quot;Senju Tobirama&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;虚继承&quot;&gt;&lt;a href=&quot;#虚继承&quot; class=&quot;headerlink&quot; title=&quot;虚继承&quot;&gt;&lt;/a&gt;虚继承&lt;/h
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承之多重继承和多继承</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/02/25/c-继承之多重继承和多继承/</id>
    <published>2018-02-25T08:18:04.000Z</published>
    <updated>2018-02-25T08:36:39.299Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承之多重继承和多继承/index.jpg" alt="Pain the cartoon"></p><h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多重继承是一个类的父类也有父类。<br>多重继承的对象初始化方式最高的父类到子类。<br>A()–&gt;B–&gt;C()<br>销毁时正好是初始化的反顺序。<br>~C–&gt;~B–&gt;A()<br>代码示例为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;&#125;;</span><br><span class="line">class B:public A&#123;&#125;;</span><br><span class="line">class C:public B&#123;&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ul><li>多重继承与多继承不同，当B类从A类派生，C类从B类派生，此时称为多重继承</li><li>当实例化子类时，会首先依次调用所有基类的构造函数，最后调用该子类的构造函数；销毁该子类时，则相反，先调用该子类的析构函数，再依次调用所有基类的析构函数。</li><li>无论继承的层级有多少层，只要它们保持着直接或间接的继承关系，那么子类都可以与其直接父类或间接父类构成 is a的关系，并且能够通过父类的指针对直接子类或间接子类进行相应的操作，子类对象可以给直接父类或间接父类的对象或引用赋值或初始化。</li></ul><hr><h1 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>多继承是一个类有2个以上父类。<br>多继承的对象初始化方式是父类依次初始化。<br>A()–&gt;B–&gt;AB()<br>销毁时正好是初始化的反顺序。<br>~AB–&gt;~B()–&gt;A~()</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;&#125;;</span><br><span class="line">class B&#123;&#125;;</span><br><span class="line">class AB:public A,public B&#123;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承之多重继承和多继承/index.jpg&quot; alt=&quot;Pain the cartoon&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承之is_a和has_a</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E4%B9%8Bis-a%E5%92%8Chasas-a/"/>
    <id>http://yoursite.com/2018/02/25/c-继承之is-a和hasas-a/</id>
    <published>2018-02-25T08:17:34.000Z</published>
    <updated>2018-02-25T08:36:53.319Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承之is-a和hasas-a/index.jpg" alt="Pain the six"></p><h1 id="is-a原则"><a href="#is-a原则" class="headerlink" title="is_a原则"></a>is_a原则</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>举一个例子，有一个Horse类可以保存关于马的所有信息，身高体重等等，那么我们就可以从Horse类中派生出白马类，白马类包含所有Horse类的成员，在白马类中可以新增关于白马的成员，这个成员通常不用于Horse类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Horse</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int Tall;</span><br><span class="line">    int Weight;</span><br><span class="line">&#125;;</span><br><span class="line">class WhiteHorse:public Horse</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int Color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的代码中，WhiteHorse多了颜色这个成员。<br>整体来看，is-a表示了一种是的关系。比如白马是马，香蕉是水果，老师是人这种关系。<br>并且<strong>public</strong>的继承方式建立了<code>is_a</code>的关系。</p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>派生类Soldier继承自基类Person<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//Person.h</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Person(string name = &quot;Jim&quot;);</span><br><span class="line">    ~Person();</span><br><span class="line"></span><br><span class="line">    void play();</span><br><span class="line">protected:</span><br><span class="line">    string m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//Soldier.h</span><br><span class="line">class Soldier : public Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Soldier(string name = &quot;James&quot;, int age = 20);</span><br><span class="line"></span><br><span class="line">    ~Soldier();</span><br><span class="line"></span><br><span class="line">    void work();</span><br><span class="line">protected:</span><br><span class="line">    int m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li>派生类可以给基类赋值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//main.cpp</span><br><span class="line">int main()&#123;</span><br><span class="line">    Soldier s1;</span><br><span class="line">    Person p1 = s1;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>因为一个士兵也是一个人。</p><ul><li>基类指针可以指向派生类(派生类可以取地址给基类)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//main.cpp</span><br><span class="line">int main()&#123;</span><br><span class="line">    Soldier s1;</span><br><span class="line">    Person *p2 = &amp;s1;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>同理，一个士兵也是一个人，父类的指针也可以指向子类对象。</p><ul><li><p>把基类的指针或者是基类的对象或者是基类的引用作为函数的参数来使它可以接收所传入的子类的对象，并且也可以传入基类的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void func1(Person *p)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func2(Person &amp;p)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main.cpp</span><br><span class="line">int main()&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    Soldier s1;</span><br><span class="line">    func1(&amp;p1);     func2(p1);</span><br><span class="line">    func1(&amp;s1);     func2(s1);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基类只能接收和访问派生类中自己有的数据成员和成员函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//#include &quot;Person.h&quot;</span><br><span class="line"># include &quot;Soldier.h&quot;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Soldier soldier;</span><br><span class="line">    Person person;</span><br><span class="line">    person = soldier;</span><br><span class="line">    person.play();</span><br><span class="line"></span><br><span class="line">    Person *p = &amp;soldier;</span><br><span class="line">    p-&gt;play();  // 使用基类声明的对象只能调用基类的方法</span><br><span class="line">    //p-&gt;work();    // 使用基类声明的对象不能调用派生类的方法</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要调用子类的成员函数，那么就是多态的内容了，后面再说。<br>这是在编译期就决定了的。</p></li><li>通过基类的指针指向派生类的对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//#include &quot;Person.h&quot;</span><br><span class="line">#include &quot;Soldier.h&quot;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Person *pp = new Soldier;   // 基类的指针去指向派生类的内存空间</span><br><span class="line">    pp-&gt;play();</span><br><span class="line">    delete pp;  // 销毁基类的对象，执行的是基类的析构函数，派生类的内存并没有释放</span><br><span class="line">    pp = NULL;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">LOG:</span><br><span class="line">Person::play()</span><br><span class="line">James</span><br><span class="line">Person::~Person()</span><br></pre></td></tr></table></figure></li></ul><h1 id="has-a原则"><a href="#has-a原则" class="headerlink" title="has_a原则"></a>has_a原则</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;has-a体现了有这个思想。<br>&emsp;&emsp;比如，午餐有香蕉。但是午餐不是香蕉。<br>&emsp;&emsp;其实私有跟保护继承体现了has-a原则是因为，私有跟保护继承是实现继承。<br>&emsp;&emsp;什么是实现继承呢？<br>&emsp;&emsp;实现继承的主要目标是代码重用，我们发现类B和类C存在同样的代码，因此我们设计了一个类 A，用于存放通用的代码，基于这种思路的继承称为实现继承。<br>&emsp;&emsp;我们可以说，午餐中存在香蕉。<br>&emsp;&emsp;而共有继承则不是，为什么？</p><blockquote><p>在需要基类对象的任何地方都可以使用公有派生类的对象来替代。通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员，而且所有成员的访问控制属性也和基类完全相同。这样，公有派生类实际就具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决。<br>那么就可得到，当为私有或保护继承的时候，是包含的关系，基类在派生类中是私有的。需要基类的时候是不能用派生类代替的。</p></blockquote><h2 id="两种情况"><a href="#两种情况" class="headerlink" title="两种情况"></a>两种情况</h2><ul><li><strong>包含</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Banana&#123;..&#125;;</span><br><span class="line"></span><br><span class="line">class Lauch</span><br><span class="line">&#123;</span><br><span class="line"> private:</span><br><span class="line">  class Banana;</span><br><span class="line"> ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>私有继承</strong><br>c++还有另一种实现has-a关系的途径—-私有继承。</li></ul><p>　　使用私有继承，基类的公有成员和保护成员都将成为派生类的私有成员。这意味着基类方法将不会成为派生对象公有接口的一部分，但可以在派生类的成员函数中使用它们。</p><p>　　使用公有继承，基类的公有方法将成为派生类的公有方法。简而言之，派生类将继承基类的接口，这是is-a关系的一部分。使用私有继承，基类的公有方法将成为派生类的私有方法。简而言之，派生类不能继承基类的接口。正如从被包含对象中看到的，这种不完全继承是has-a关系的一部分。</p><p>　　因此私有继承提供的特性与包含相同：获得实现，但不获得接口。所以，私有继承也可以用来实现has-a关系。</p><ul><li><em>使用包含还是私有继承</em></li></ul><p> &emsp;&emsp;大多数c++程序员倾向于前者。不过私有继承所提供的特性确实比包含多。例如，假设类包含保护成员，则这样的成员在派生类中是可用的，但在继承层次机构外是不可用的。如果使用组合奖这样的类保护在另一类中，则后者将不是排成类，而是位于继承层次结构之外，因此不能访问保护成员。但通过继承的到的将是派生类，因此他能够访问保护成员。</p><p>　　另一种需要使用私有继承的情况是需要重新定义虚函数。派生类可以重新定义虚函数，但包含类不能。使用私有继承，重新定义的函数将只能在类中使用，而不是公有的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承之is-a和hasas-a/index.jpg&quot; alt=&quot;Pain the six&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;is-a原则&quot;&gt;&lt;a href=&quot;#is-a原则&quot; class=&quot;headerlink&quot; title=&quot;is
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承之隐藏</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E4%B9%8B%E9%9A%90%E8%97%8F/"/>
    <id>http://yoursite.com/2018/02/25/c-继承之隐藏/</id>
    <published>2018-02-25T08:16:53.000Z</published>
    <updated>2018-02-25T08:36:50.804Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承之隐藏/index.jpg" alt="Yahiko"></p><h1 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>隐藏是指派生类的函数屏蔽了与其同名的基类函数。</p><h2 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Person()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Person的构造函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    ~Person()&#123;</span><br><span class="line">cout&lt;&lt;&quot;Person的析构函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    void eat()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Person的eat函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">    int m_iAge;</span><br><span class="line">    string m_strName;</span><br><span class="line">&#125;;</span><br><span class="line">class Worker :public Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Worker()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的构造函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    ~Worker()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的析构函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    void eat()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的eat函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    void work()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的work函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">    int m_iSalary;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Worker w;</span><br><span class="line">w.eat();</span><br><span class="line">w.Person::eat();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person的构造函数</span><br><span class="line">Worker的构造函数</span><br><span class="line">Worker的eat函数</span><br><span class="line">Person的eat函数</span><br><span class="line">Worker的析构函数</span><br><span class="line">Person的析构函数</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 0.1206 seconds with return value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><h2 id="简易解释"><a href="#简易解释" class="headerlink" title="简易解释"></a>简易解释</h2><ul><li>Worker是子类，Person是父类，我们在栈上实例化子类方法，首先调用父类构造函数，其次调用子类构造函数。析构函数则反之，并且栈上的空间是由系统管理，系统调用析构函数。</li><li>父类中的eat()函数被隐藏，w.eat()调用的是子类的eat()函数。</li><li>如果我们需要调用父类的成员函数，可以采用<code>w.Person::eat();</code>的方法。</li></ul><h2 id="几个易混淆的名词"><a href="#几个易混淆的名词" class="headerlink" title="几个易混淆的名词"></a>几个易混淆的名词</h2><ul><li>隐藏：<br>不解释了</li><li>覆盖或者称之为重写（override）<br>如果我们没有在子类中定义同名的虚函数，那么在子类虚函数表当中就会写上父类当中那个虚函数的函数入口地址，如果我们在子类中也定义了同名的虚函数，那么在子类的虚函数表当中，我们就会把原来父类的虚函数的函数地址覆盖一下，覆盖成子类的虚函数的函数地址。</li><li><strong>如何记忆</strong><br>隐藏并没有消失，可以通过特殊的手段访问，数据成员也有隐藏这种现象。而覆盖则是在子类的虚函数表当中，我们就会把原来父类的虚函数的函数地址覆盖一下，覆盖成子类的虚函数的函数地址。（后续会有博客详细解释）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承之隐藏/index.jpg&quot; alt=&quot;Yahiko&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;隐藏&quot;&gt;&lt;a href=&quot;#隐藏&quot; class=&quot;headerlink&quot; title=&quot;隐藏&quot;&gt;&lt;/a&gt;隐藏&lt;/h1&gt;&lt;h2 id=&quot;概念：
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承方式</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/25/c-继承方式/</id>
    <published>2018-02-25T07:36:58.000Z</published>
    <updated>2018-02-25T08:36:45.566Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承方式/index.jpg" alt="Uchiha Sasuke"></p><h1 id="c-继承（三种继承方式）"><a href="#c-继承（三种继承方式）" class="headerlink" title="c++继承（三种继承方式）"></a>c++继承（三种继承方式）</h1><h2 id="三种继承方式"><a href="#三种继承方式" class="headerlink" title="三种继承方式"></a>三种继承方式</h2><ul><li>共有继承<br>公有继承的特点是基类的公有成员和保护成员作为派生类的成员时，它们都保持原有的状态，而基类的私有成员仍然是私有的，不能被这个派生类的子类所访问。</li><li>私有继承<br>私有继承的特点是基类的公有成员和保护成员都作为派生类的私有成员，并且不能被这个派生类的子类所访问。</li><li>保护继承<br>保护继承的特点是基类的所有公有成员和保护成员都成为派生类的保护成员，并且只能被它的派生类成员函数或友元访问，基类的私有成员仍然是私有的。<h2 id="继承方式之间的关系"><a href="#继承方式之间的关系" class="headerlink" title="继承方式之间的关系"></a>继承方式之间的关系</h2></li></ul><table><thead><tr><th>继承方式</th><th style="text-align:center">基类的public成员</th><th>基类的protected成员</th><th style="text-align:right">基类的private成员</th></tr></thead><tbody><tr><td>public</td><td style="text-align:center">成为public成员</td><td>成为protected成员</td><td style="text-align:right">不可见</td></tr><tr><td>protected</td><td style="text-align:center">成为protected成员</td><td>成为protected成员</td><td style="text-align:right">不可见</td></tr><tr><td>private</td><td style="text-align:center">成为private成员</td><td>成为private成员</td><td style="text-align:right">不可见</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不管是哪种继承方式， 在派生类内部都可以访问基类的公有成员和保护成员 ， 基类的私有成员存在但是在子类中不可见（ 不能访问） 。</li><li>使用关键字class时默认的继承方式是private， 使用struct时默认的继承方式是public， 不过最好显式的写出继承方式。</li><li>在实际运用中一般使用都是public继承， 极少场景下才会使用protetced/private继承。</li><li>在struct继承中，如果没有显式给出继承类型，则默认的为public继承；在class继承中，如果没有显式给出继承类型，则默认的为private继承；<h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><h3 id="三种类成员访问限定符"><a href="#三种类成员访问限定符" class="headerlink" title="三种类成员访问限定符"></a>三种类成员访问限定符</h3></li><li><em>public</em>（共有）</li><li><em>protected</em>（保护）</li><li><em>private</em>（私有）<h3 id="三种继承关系"><a href="#三种继承关系" class="headerlink" title="三种继承关系"></a>三种继承关系</h3></li><li><em>public</em>（共有继承）</li><li><em>protected</em>（保护继承）</li><li><em>private</em>(私有继承)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承方式/index.jpg&quot; alt=&quot;Uchiha Sasuke&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;c-继承（三种继承方式）&quot;&gt;&lt;a href=&quot;#c-继承（三种继承方式）&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/08/hello-world/"/>
    <id>http://yoursite.com/2018/02/08/hello-world/</id>
    <published>2018-02-08T08:49:36.568Z</published>
    <updated>2018-02-25T08:09:44.759Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/08/hello-world/index.jpg" alt="一切的开始"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Compress-code-using-gulp"><a href="#Compress-code-using-gulp" class="headerlink" title="Compress code using gulp"></a>Compress code using gulp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure><p>More info: <a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/08/hello-world/index.jpg&quot; alt=&quot;一切的开始&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a
      
    
    </summary>
    
    
  </entry>
  
</feed>
