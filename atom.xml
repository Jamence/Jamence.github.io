<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jamence&#39;s blog</title>
  
  <subtitle>everything is funny when you are exploring</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-06T06:02:12.302Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jamence</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编译原理</title>
    <link href="http://yoursite.com/2018/05/03/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/05/03/编译原理/</id>
    <published>2018-05-03T13:41:51.000Z</published>
    <updated>2018-05-06T06:02:12.302Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/05/03/编译原理/index.jpg" alt="编译原理"></p><h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><p>总结自程序设计语言编译原理（第三版）陈火旺</p><ul><li><a href="#1">第一章 引论</a></li><li><a href="#2">第二章 高级语言及其语法描述</a></li><li><a href="#3">第三章 词法分析</a></li><li><a href="#4">第四章 语法分析-自上而下分析</a></li><li><a href="#5">第五章 词法分析-自下而上分析</a></li></ul><h2 id="1">第一章 引论</h2><h3 id="什么叫编译程序"><a href="#什么叫编译程序" class="headerlink" title="什么叫编译程序"></a>什么叫编译程序</h3><p>执行高级程序一般分为两步</p><ul><li>使用编译程序将高级语言翻译成机器语言程序</li><li>运行机器语言程序求得计算结果</li></ul><p>翻译程序：指的是可以将某一种语言程序（称为源语言程序）转换为另一种语言程序，而两者在逻辑上是等价的。</p><h3 id="编译过程概述"><a href="#编译过程概述" class="headerlink" title="编译过程概述"></a>编译过程概述</h3><p>编译程序的工作过程一般分为：</p><ul><li>词法分析<br>简言之就是输入一个串，识别出一个个单词。<br>例如：我们输入<br>for I:=1 to 100 do<br>我们可以识别出：<br>基本字：<code>for to do</code><br>标识符：<code>I</code><br>赋值号：<code>：=</code><br>基本字: <code>to</code><br>整常数：<code>100</code></li><li>语法分析<br>语法分析的作用在于在上一步的基础上，将单词符号串分解成各类语法单元。同时，确定是否构成语法上正确的程序。<br>比如<code>Z:=X+0.618*Y</code>可以分解成赋值语句（<code>Z:=？</code>），算术表达式语句(<code>X+0.618*Y</code>)</li><li>语义分析与中间代码产生</li><li>优化</li><li>目标代码优化</li></ul><h3 id="编译程序结构"><a href="#编译程序结构" class="headerlink" title="编译程序结构"></a>编译程序结构</h3><p>一般含有五个部分，分别对应五个工作过程</p><ul><li>词法分析器</li><li>语法分析器</li><li>语义分析与中间代码产生器</li><li>优化器</li><li>目标代码生成器<br>不仅如此，我们还有另外一些结构</li><li>表格与表格管理<br>我们需要表格来登记源程序的各类信息和编译各阶段的进展状况，比如符号表，用来登记源程序中出现的每个名字以及名字的各种属性</li><li>出错处理<br>一般错误分为<code>语法错误</code>和<code>语义错误</code></li></ul><p>还有其他的一些概念：</p><ul><li>遍<br>就是说编译多少遍的问题，<br>对一些要求较高的部分，需要多遍操作（比如优化）<br>或者一些要求较低的部分或者连接较为紧密，可以合起来作为一遍（比如语法分析，语法分析及语义分析，中间代码产生三部分合在一起，因为三部分连接非常紧密）</li><li>编译前端与后端<br>编译前端：主要由与源程序有关但是与目标及无关的那些部分，比如词法分析，语法分析，语语义分析与中间代码产生<br>编译后端：主要由编译程序中与目标机中有关的那部分。<br>所以，我们可以取前端的部分，只需改写后端，便可以很方便的移植编译程序。</li></ul><h3 id="编译程序与程序设计环境"><a href="#编译程序与程序设计环境" class="headerlink" title="编译程序与程序设计环境"></a>编译程序与程序设计环境</h3><h3 id="编译程序的生成（重点）"><a href="#编译程序的生成（重点）" class="headerlink" title="编译程序的生成（重点）"></a>编译程序的生成（重点）</h3><p>具体看书，样例较多</p><h2 id="2">第二章 高级语言及其语法描述</h2><p>本章介绍高级语言的结构和主要的共同特征，并介绍程序语言的语法描述方法。</p><h3 id="程序语言的定义"><a href="#程序语言的定义" class="headerlink" title="程序语言的定义"></a>程序语言的定义</h3><ul><li>程序语言主要由语法和语义两部分组成</li><li>词法规则：单词符号的形成规则，包括正则式，有限自动机等等用来分析</li><li>语法规则：规定了如何从单词符号形成更大的结构（即语法单元），一般使用上下文无关文法来描述。</li><li>语义规则：指的是一种规则，使用这种规则，使用它可以定义一个程序的意义。</li><li>一个程序语言的基本过程是描述数据和对数据的运算</li></ul><h3 id="高级语言的一般特性"><a href="#高级语言的一般特性" class="headerlink" title="高级语言的一般特性"></a>高级语言的一般特性</h3><ul><li>高级语言的分类：</li><li>程序结构</li><li>数据类型与操作</li></ul><h3 id="程序语言的语法描述"><a href="#程序语言的语法描述" class="headerlink" title="程序语言的语法描述"></a>程序语言的语法描述</h3><ul><li>一些定义：<code>连接积</code> , <code>闭包</code> , <code>正则闭包</code></li><li>上下文无关文法<br>上下文无关文法包括四个部分，即<code>终结符号</code>,<code>非终结符号</code>,<code>开始符号</code>,<code>产生式</code><br>部分定义：<br><code>直接推出</code>,<code>推导</code>,<code>句型</code>,<code>句子</code>，<code>最左推导</code>,<code>最右推导</code>,<code>,</code></li><li>语法分析树与二义性<br>语法分析树：使用一张图表示一个句型的推导称为语法分析树。<br>如果一个文法存在某个句子对应两颗不同的语法树，则称这个文法是二义的。（即表示一个文法存在某个句子有两个不同的最左（最右）推导，）</li><li>形式语言鸟瞰<br>Chomsky所创建的形式语言（太强了）<br>分为：<code>短文语法</code>,<code>i型文法（上下文有关文法）</code>,<code>上下文无关文法</code>,<code>正规文法</code><br>主要的不同在于产生式规则不同。</li></ul><h2 id="3">第三章 词法分析</h2><h3 id="对于词法分析器的要求"><a href="#对于词法分析器的要求" class="headerlink" title="对于词法分析器的要求"></a>对于词法分析器的要求</h3><ul><li>输入源程序，输出单词符号（可分为：<code>关键字</code>,<code>标识符</code>,<code>常数</code>,<code>运算符</code>,<code>界符</code>）,输出形式为<code>（单词种别，单词符号的属性值）</code></li></ul><h3 id="词法分析器的设计"><a href="#词法分析器的设计" class="headerlink" title="词法分析器的设计"></a>词法分析器的设计</h3><ul><li>第一步：输入源程序文本，输入串一般在缓冲区中（输入缓冲区），</li><li>第二步：输入之前，我们需要预处理，剔除空白符，跳格符等无用字符</li><li>第三步：识别，使用超前搜索，就是当前我们无法判断这个词的属性，但是经过查看当前值之后的字符就可以判断该词的属性。</li></ul><h3 id="正规表达式与有限自动机"><a href="#正规表达式与有限自动机" class="headerlink" title="正规表达式与有限自动机"></a>正规表达式与有限自动机</h3><ul><li><code>正规式</code>，<code>正规集</code></li><li><code>确定有限自动机(DFA)</code>，<code>非确定有限自动机(NFA)</code>，区别在于确定和非确定</li><li>子集法，将<code>NFA</code>转化为<code>DFA</code></li><li><code>正规文法</code> 等价于 <code>有限自动机</code></li><li><code>正规式</code> 等价于 <code>有限自动机</code></li><li><code>确定有限自动机(DFA)</code>化简</li></ul><h3 id="词法分析器的自动产生（暂时没有看）"><a href="#词法分析器的自动产生（暂时没有看）" class="headerlink" title="词法分析器的自动产生（暂时没有看）"></a>词法分析器的自动产生（暂时没有看）</h3><ul><li>语言LEX的一般描述</li><li>超前搜索</li><li>LEX的实现</li></ul><h2 id="4">第四章 语法分析-自上而下分析</h2><h3 id="词法分析器的功能"><a href="#词法分析器的功能" class="headerlink" title="词法分析器的功能"></a>词法分析器的功能</h3><ul><li>语法分析是编译过程的核心部分。它的任务是在词法分析识别单词符号串的基础上，分析并判定程序的语法结构是否符合语法规则。</li><li>工作本质是按文法的产生式，识别输入串是否为一个句子。</li><li>一般有两类语法分析方法：<code>自上而下分析法</code>,<code>自下而上分析法</code></li></ul><h3 id="自上而下分析面临的问题"><a href="#自上而下分析面临的问题" class="headerlink" title="自上而下分析面临的问题"></a>自上而下分析面临的问题</h3><ul><li>文法的左递归问题，程序中存在左递归，则无法终结</li><li>回溯时会附带有一大堆语义工作（比如中间代码生成和各种表格的记录工作）</li><li>虚假匹配的问题</li><li>难以定位输入串出错的位置</li><li>带回溯的方式低效，需要穷尽一切来完成一个功能。</li></ul><h3 id="LL-1-分析法"><a href="#LL-1-分析法" class="headerlink" title="LL(1)分析法"></a>LL(1)分析法</h3><ul><li>消除左递归（分为直接左递归和间接左递归）</li><li>消除回溯，提左因子，即得到<code>FIRST集</code>和<code>FOLLOW集</code> + <code>LL(1)文法</code>的判定</li><li>FIRST集表示递归时直接根据FIRST集和需要得出的字符，我们可以确定下一个转移的状态</li><li>FOLLOW集表示两输入字符之间以空串间隔，但是后一个字符无法通过FIRST集确定转换规则，我们需要使用FOLLOW集来判断后一个字符是否是非终结符后面出现的字符</li></ul><h3 id="递归下降分析程序构造"><a href="#递归下降分析程序构造" class="headerlink" title="递归下降分析程序构造"></a>递归下降分析程序构造</h3><p>比较简单，就是根据LL(1)文法，构造一组分析程序</p><h3 id="预测分析程序"><a href="#预测分析程序" class="headerlink" title="预测分析程序"></a>预测分析程序</h3><ul><li>预测分析程序工作过程<br>我们通过LL(1)文法中的FIRST集和FOLLOW集得出LL(1)分析表<br>我们有<code>输入串</code>,<code>符号栈</code>，不断对比分析表<br>细节看书上的示例</li><li>预测分析表的构造<br><code>1-&gt;</code>得出FOLLOW集和FOLLOW集<br><code>2-&gt;</code>根据书中描述的算法得出预测分析表<h3 id="LL-1-分析中的错误处理（看不懂呀）"><a href="#LL-1-分析中的错误处理（看不懂呀）" class="headerlink" title="LL(1)分析中的错误处理（看不懂呀）"></a>LL(1)分析中的错误处理（看不懂呀）</h3>一般有两种情况</li><li>栈顶的终结符与当前的输入符号不匹配</li><li>非终结符A处于栈顶，面临的输入符号为a，但分析表M中的M[A,a]为空</li></ul><h2 id="5">第五章 词法分析-自下而上分析</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/05/03/编译原理/index.jpg&quot; alt=&quot;编译原理&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;编译原理&quot;&gt;&lt;a href=&quot;#编译原理&quot; class=&quot;headerlink&quot; title=&quot;编译原理&quot;&gt;&lt;/a&gt;编译原理&lt;/h1&gt;&lt;p&gt;总结自程序
      
    
    </summary>
    
      <category term="课程" scheme="http://yoursite.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
      <category term="编译原理" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>权值线段树+主席树</title>
    <link href="http://yoursite.com/2018/04/22/%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>http://yoursite.com/2018/04/22/权值线段树-主席树/</id>
    <published>2018-04-22T00:55:22.000Z</published>
    <updated>2018-04-22T03:45:38.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>维护全局的值域信息，每个节点记录的是该值域的值出现的总次数。</li><li>使用二分的思想（离散化的时候，需要用到）</li><li>支持查询全局K小值，全局rank，前驱，后继等。</li><li>单词操作时间复杂度为O(logn)</li><li>空间复杂度为O(n)</li><li>相对于平衡树的优势：代码简单，速度快</li><li>劣势：值域较大时，我们需要离散化，变成离线数据结构（我认为的离线指的是不能更改插入之类的操作，只能进行查询）</li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><ol><li>求解逆序对的个数（树状数组，归并排序等等方法）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=5005;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int l,r,num;</span><br><span class="line">&#125;data[4*maxn];</span><br><span class="line">void build(int id,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    data[id].l=l;</span><br><span class="line">    data[id].r=r;</span><br><span class="line">    data[id].num=0;</span><br><span class="line">    if(l==r)</span><br><span class="line">        return ;</span><br><span class="line">    int mid=(l+r)/2;</span><br><span class="line">    build(id*2,l,mid);</span><br><span class="line">    build(id*2+1,mid+1,r);</span><br><span class="line">&#125;</span><br><span class="line">int query(int id,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(data[id].l==l&amp;data[id].r==r)</span><br><span class="line">        return data[id].num;</span><br><span class="line">    int mid=(data[id].l+data[id].r)/2;</span><br><span class="line">    if(mid&gt;=r)</span><br><span class="line">        return query(id*2,l,r);</span><br><span class="line">    else if(mid&lt;l)</span><br><span class="line">        return query(id*2+1,l,r);</span><br><span class="line">    else</span><br><span class="line">        return query(id*2,l,mid)+query(id*2+1,mid+1,r);</span><br><span class="line">&#125;</span><br><span class="line">void update(int id,int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(data[id].l==x&amp;&amp;data[id].r==x)</span><br><span class="line">    &#123;</span><br><span class="line">        data[id].num++;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid=(data[id].l+data[id].r)/2;</span><br><span class="line">    if(mid&gt;=x)</span><br><span class="line">        update(id*2,x);</span><br><span class="line">    else</span><br><span class="line">        update(id*2+1,x);</span><br><span class="line">    data[id].num=data[id*2].num+data[id*2+1].num;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">int a[maxn];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        build(1,1,n+1);</span><br><span class="line">        int ans=0,x;</span><br><span class="line">        for(int i=0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">            a[i]++;</span><br><span class="line">            ans+=query(1,a[i]+1,n+1);</span><br><span class="line">            update(1,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int sum=ans;</span><br><span class="line">        for(int i=n-1;i&gt;=0;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=ans-(n-a[i])+(a[i]-1);</span><br><span class="line">            sum=min(sum,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总而言之，权值线段树就是指每个节点存的是这个点出现的次数。<br>比如对于1，3，4，5，5，6；<br>画出一棵树<br><img src="/2018/04/22/权值线段树-主席树/1.png" alt=""></p><p>最底下的节点数从1到n，有n个，如果为0的节点数太多，我们需要离散化，因为压根没有用到，不需要。<br>其次根节点的权值等同于序列中该值出现的次数。<br>权值线段树感觉考的东西比较少，介绍这个主要是为了介绍主席树（可持久化线段树），为了理解主席树。</p><h1 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h1><h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[100],b[100],c[100],n;</span><br><span class="line">int solve()//离散化</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0;i&lt;n;i++) b[i]=a[i];</span><br><span class="line">    sort(b,b+n);</span><br><span class="line">    int m=unique(b,b+n)-b;//去重</span><br><span class="line">    for(int i=0;i&lt;n;i++) c[i]=lower_bound(b,b+m,a[i])-b;//二分找对应位置</span><br><span class="line">    for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,c[i]);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    solve();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol><li>B站关于权值线段树的视频<a href="https://www.bilibili.com/video/av16552942" target="_blank" rel="noopener">https://www.bilibili.com/video/av16552942</a></li><li>权值线段树代码实现 <a href="https://blog.csdn.net/tianyuhang123/article/details/77975426" target="_blank" rel="noopener">https://blog.csdn.net/tianyuhang123/article/details/77975426</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;权值线段树&quot;&gt;&lt;a href=&quot;#权值线段树&quot; class=&quot;headerlink&quot; title=&quot;权值线段树&quot;&gt;&lt;/a&gt;权值线段树&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Structure 离散化" scheme="http://yoursite.com/tags/Structure-%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Rmq算法</title>
    <link href="http://yoursite.com/2018/04/20/Rmq%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/20/Rmq算法/</id>
    <published>2018-04-20T06:08:29.000Z</published>
    <updated>2018-04-20T06:11:30.856Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/04/20/Rmq算法/index.jpg" alt="Rmq算法相关算法"></p><h1 id="RMQ问题-Range-Minimum-Query-："><a href="#RMQ问题-Range-Minimum-Query-：" class="headerlink" title="RMQ问题(Range Minimum Query)："></a>RMQ问题(Range Minimum Query)：</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>对于长度为n的数列A，回答若干询问RMQ(A,i,j)(i,j&lt;=n)，返回数列A中下标在[i,j]里的最小(大）值，也就是说，RMQ问题是指求区间最值的问题。</p><h2 id="求解方法："><a href="#求解方法：" class="headerlink" title="求解方法："></a>求解方法：</h2><h3 id="朴素方法："><a href="#朴素方法：" class="headerlink" title="朴素方法："></a>朴素方法：</h3><p>我们预处理阶段时间复杂度为：O(n)<br>我们查询阶段时间复杂度为：O(n)</p><h3 id="线段树："><a href="#线段树：" class="headerlink" title="线段树："></a>线段树：</h3><p>这是一个比较简单的线段树问题，咱们求解一段区间的最值，需要用到懒操作<br>详情请看：<a href="http://jamence.top/2018/03/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/" target="_blank" rel="noopener">线段树</a></p><h3 id="ST-Sparse-Table-算法"><a href="#ST-Sparse-Table-算法" class="headerlink" title="ST(Sparse Table)算法"></a>ST(Sparse Table)算法</h3><ul><li><p>建立一个二维数组F[1…N][1…O(log2N)]的整数值<br>在这个数组中F[i][j]表示范围[i,i+2^j -1]中的最大值<br>(例如[2,5]中的最大值被计为F[2][2])。<br>建立数组的过程可以在O(NlogN)时间内完成。<br>使用动态规划的思想</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void Initialise(vector&lt;int&gt; &amp;Array)</span><br><span class="line">&#123;</span><br><span class="line">int Length = (int)Array.size();</span><br><span class="line">// 长度为 0 时，表示数据自身。</span><br><span class="line">for (int i = 0; i &lt; Length; ++i) F[i][0] = Array[i];</span><br><span class="line">for (int j = 1; (1 &lt;&lt; j) &lt;= Length; ++j)</span><br><span class="line">for (int i = 0; i + (1 &lt;&lt; j) - 1 &lt; Length; ++i)</span><br><span class="line">F[i][j] = min(</span><br><span class="line">F[i][j - 1], F[i + (1 &lt;&lt; (j - 1))][j - 1]</span><br><span class="line">); // 分成长度相等的两段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询<br>当我们需要计算一个区间中的最大值（例如 [3,8]时），我们先求出这个区间的长度（即 8 - 3 + 1 = 6）。<br>然后我们算出不大于它的最大2^k值的指数（即 2）。我们要查询分别以3开头，和以 8 结尾的两个长度为2^2的区间的最大值。<br>显然F[3][2]和 F[5][2]也就是（[3,6]和[5,8]的最大值就是[3,8]的最大值。查询的时间是常数，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int Query(int Left, int Right)</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line">while (1 &lt;&lt; (i + 1) &lt;= Right - Left + 1) ++i;</span><br><span class="line">return min(</span><br><span class="line">F[Left][i], F[Right - (1 &lt;&lt; i) + 1][i]</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>感谢:</p><ol><li>ST算法：<a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E5%9B%B4%E6%9C%80%E5%80%BC%E6%9F%A5%E8%AF%A2" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E8%8C%83%E5%9B%B4%E6%9C%80%E5%80%BC%E6%9F%A5%E8%AF%A2</a></li><li>RMQ问题简介：<br><a href="http://kmplayer.iteye.com/blog/575725" target="_blank" rel="noopener">http://kmplayer.iteye.com/blog/575725</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/04/20/Rmq算法/index.jpg&quot; alt=&quot;Rmq算法相关算法&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;RMQ问题-Range-Minimum-Query-：&quot;&gt;&lt;a href=&quot;#RMQ问题-Range-Minimum-Query-：&quot; c
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Structure" scheme="http://yoursite.com/tags/Structure/"/>
    
  </entry>
  
  <entry>
    <title>Lca相关算法</title>
    <link href="http://yoursite.com/2018/04/20/Lca%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/20/Lca相关算法/</id>
    <published>2018-04-20T01:18:44.000Z</published>
    <updated>2018-04-20T14:54:32.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/04/20/Lca相关算法/index.jpg" alt="Lca相关算法"></p><h1 id="Lca相关算法"><a href="#Lca相关算法" class="headerlink" title="Lca相关算法"></a>Lca相关算法</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在图论和计算机科学中，最近公共祖先是指在一个树或者有向无环图中同时拥有v和w作为后代的最深的节点。在这里，我们定义一个节点也是其自己的后代，因此如果v是w的后代，那么w就是v和w的最近公共祖先。</p><p>最近公共祖先是两个节点所有公共祖先中离根节点最远的，计算最近公共祖先和根节点的长度往往是有用的。比如为了计算树中两个节点v和w之间的距离，可以使用以下方法：分别计算由v到根节点和w到根节点的距离，两者之和减去最近公共祖先到根节点的距离的两倍即可得到v到w的距离。</p><h2 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h2><h3 id="在线算法ST表"><a href="#在线算法ST表" class="headerlink" title="在线算法ST表"></a>在线算法ST表</h3><p>在线算法和离线算法：<br>在计算机科学中，一个在线算法是指它可以以序列化的方式一个个的处理输入，也就是说在开始时并不需要已经知道所有的输入。相对的，对于一个离线算法，在开始时就需要知道问题的所有输入数据，而且在解决一个问题后就要立即输出结果。例如，选择排序在排序前就需要知道所有待排序元素，然而插入排序就不必。<br>首先咱们对于以下一棵树<br><img src="/2018/04/20/Lca相关算法/1.jpg" alt=""></p><p>分析如下<br><img src="/2018/04/20/Lca相关算法/2.jpg" alt=""><br>在转化成区间之后，我们可以使用<a href="http://jamence.top/2018/04/20/Rmq%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">RMQ相关算法</a>来解决该问题。<br>对于dfs算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int tot,head[N],ver[2*N],R[2*N],first[N],dir[N];</span><br><span class="line">//ver:节点编号 R：深度 first：点编号第一次位置 dir：距离</span><br><span class="line">void dfs(int u ,int dep)</span><br><span class="line">&#123;</span><br><span class="line">       vis[u] = true;</span><br><span class="line">ver[++tot] = u;</span><br><span class="line">first[u] = tot;</span><br><span class="line">R[tot] = dep;</span><br><span class="line">    for(int k=head[u]; k!=-1; k=e[k].next)</span><br><span class="line">        if( !vis[e[k].v] )</span><br><span class="line">        &#123;</span><br><span class="line">            int v = e[k].v , w = e[k].w;</span><br><span class="line">            dir[v] = dir[u] + w;</span><br><span class="line">            dfs(v,dep+1);</span><br><span class="line">            //下面两句表示dfs的时候还要回溯到上面</span><br><span class="line">            ver[++tot] = u;</span><br><span class="line">R[tot] = dep;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设我们需要得到D和F的LCA，<br>那么我们找D和F在序列中的位置可以通过first数组发现在数组下标为3—–6,在该区间中找到深度为2，该点的编号为4，即为B点（得出区间后，我们使用RMQ维护）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void ST(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">        dp[i][0] = i;</span><br><span class="line">    for(int j=1;(1&lt;&lt;j)&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=1;i+(1&lt;&lt;j)-1&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int a = dp[i][j-1] , b = dp[i+(1&lt;&lt;(j-1))][j-1];</span><br><span class="line">            dp[i][j] = R[a]&lt;R[b]?a:b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//中间部分是交叉的。</span><br><span class="line">int RMQ(int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    int k=0;</span><br><span class="line">    while((1&lt;&lt;(k+1))&lt;=r-l+1)</span><br><span class="line">        k++;</span><br><span class="line">    int a = dp[l][k], b = dp[r-(1&lt;&lt;k)+1][k]; //保存的是编号</span><br><span class="line">    return R[a]&lt;R[b]?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int LCA(int u ,int v)</span><br><span class="line">&#123;</span><br><span class="line">    int x = first[u] , y = first[v];</span><br><span class="line">    if(x &gt; y) swap(x,y);</span><br><span class="line">    int res = RMQ(x,y);</span><br><span class="line">    return ver[res];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Tarjan离线算法"><a href="#Tarjan离线算法" class="headerlink" title="Tarjan离线算法"></a>Tarjan离线算法</h3><p>tarjan算法的有点在于相对稳定，时间复杂度也比较居中，比较容易理解<br>基本思路是：</p><p>1.任选一个点为根节点，从根节点开始。<br>2.遍历该点u所有子节点v，并标记这些子节点v已被访问过。<br>3.若是v还有子节点，返回2，否则下一步。<br>4.合并v到u上。<br>5.寻找与当前点u有询问关系的点v。<br>6.若是v已经被访问过了，则可以确认u和v的最近公共祖先为v被合并到的父亲节点a。<br>伪代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Tarjan(u)//marge和find为并查集合并函数和查找函数</span><br><span class="line">&#123;</span><br><span class="line">    for each(u,v)    //访问所有u子节点v</span><br><span class="line">    &#123;</span><br><span class="line">        Tarjan(v);        //继续往下遍历</span><br><span class="line">        marge(u,v);    //合并v到u上</span><br><span class="line">        标记v被访问过;</span><br><span class="line">    &#125;</span><br><span class="line">    for each(u,e)    //访问所有和u有询问关系的e</span><br><span class="line">    &#123;</span><br><span class="line">        如果e被访问过;</span><br><span class="line">        u,e的最近公共祖先为find(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAXN = 1001;</span><br><span class="line">vector&lt;int&gt; tree[MAXN];</span><br><span class="line">int indegree[MAXN], ancestor[MAXN];</span><br><span class="line">int nvertex, root;</span><br><span class="line">int father[MAXN], rnk[MAXN];</span><br><span class="line">bool visited[MAXN];</span><br><span class="line">int nquery;</span><br><span class="line">vector&lt;int&gt; query[MAXN];</span><br><span class="line"></span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;nvertex; ++i)&#123;</span><br><span class="line">        tree[i].clear();</span><br><span class="line">        indegree[i] = 0;</span><br><span class="line">        ancestor[i] = i;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        rnk[i] = 0;</span><br><span class="line">        visited[i] = false;</span><br><span class="line">        query[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line"> int rt = x;</span><br><span class="line">    while(rt != father[rt])</span><br><span class="line">        rt = father[rt];</span><br><span class="line"></span><br><span class="line">    while(father[x] != rt)&#123;</span><br><span class="line">        int y = father[x];</span><br><span class="line">        father[x] = rt;</span><br><span class="line">        x = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return rt;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x != father[x])</span><br><span class="line">        father[x] = find(father[x]);</span><br><span class="line">    return father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void unin(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    x = find(x), y = find(y);</span><br><span class="line">    if(x == y)  return ;</span><br><span class="line">    if(rnk[x] &gt; rnk[y]) father[y] = x;</span><br><span class="line"> else father[x] = y, rnk[y] += rnk[x] == rnk[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void tarjan(int x)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0; i&lt;tree[x].size(); ++i)&#123;</span><br><span class="line">        tarjan(tree[x][i]);</span><br><span class="line">        unin(x, tree[x][i]);</span><br><span class="line">        ancestor[find(x)] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visited[x] = true;</span><br><span class="line"></span><br><span class="line">    for(int i=0; i&lt;query[x].size(); ++i)&#123;</span><br><span class="line">        if(visited[query[x][i]])</span><br><span class="line">            printf(&quot;the LCA for %d and %d is %d\n&quot;, x, query[x][i], ancestor[find(query[x][i])]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;nvertex);</span><br><span class="line">    init();</span><br><span class="line"></span><br><span class="line">    int x, y;</span><br><span class="line">    for(int i=1; i&lt;nvertex; ++i)&#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</span><br><span class="line">        tree[x].push_back(y); //x-&gt;y</span><br><span class="line">        indegree[y]++;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;, &amp;nquery);</span><br><span class="line">    for(int i=0; i&lt;nquery; ++i)&#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</span><br><span class="line">        query[x].push_back(y);</span><br><span class="line">        query[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(int i=0; i&lt;nvertex; ++i)</span><br><span class="line">        if(indegree[i] == 0) &#123; root = i; break; &#125;</span><br><span class="line"></span><br><span class="line">    tarjan(root);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><ol><li>Lca介绍<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88_(%E5%9B%BE%E8%AE%BA" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88_(%E5%9B%BE%E8%AE%BA</a>)</li><li>在线算法ST表<a href="https://blog.csdn.net/liangzhaoyang1/article/details/52549822" target="_blank" rel="noopener">https://blog.csdn.net/liangzhaoyang1/article/details/52549822</a></li><li>Tarjan算法<a href="https://www.cnblogs.com/JVxie/p/4854719.html" target="_blank" rel="noopener">https://www.cnblogs.com/JVxie/p/4854719.html</a></li><li>Tarjan算法实现<a href="https://blog.csdn.net/freeelinux/article/details/54974044" target="_blank" rel="noopener">https://blog.csdn.net/freeelinux/article/details/54974044</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/04/20/Lca相关算法/index.jpg&quot; alt=&quot;Lca相关算法&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Lca相关算法&quot;&gt;&lt;a href=&quot;#Lca相关算法&quot; class=&quot;headerlink&quot; title=&quot;Lca相关算法&quot;&gt;&lt;/a&gt;Lc
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Structure" scheme="http://yoursite.com/tags/Structure/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://yoursite.com/2018/04/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2018/04/18/动态规划/</id>
    <published>2018-04-18T14:24:58.000Z</published>
    <updated>2018-04-19T13:41:47.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/04/18/动态规划/index.jpg" alt="宇智波佐助"></p><h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h1><h2 id="简单的线性递推"><a href="#简单的线性递推" class="headerlink" title="简单的线性递推"></a>简单的线性递推</h2><p>每一项都是由他的前一项递推而来，<br>例如<br><img src="/2018/04/18/动态规划/indexfirst.png" alt="动态规划"><br>当m=2，c1=c2=a1=a2=1时，是斐波那契数列。咱们需要算出第n项，咋算：<br>使用矩阵快速幂：<br><img src="/2018/04/18/动态规划/1-.PNG" alt=""><br>对于如下方程，<br><img src="/2018/04/18/动态规划/2-.PNG" alt=""><br>对于更加复杂的内容，我们可以通过如下操作<br><img src="/2018/04/18/动态规划/3-.PNG" alt=""></p><h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><p>首先，我们都知道一个n平方的DP做法，我们假设<code>dp[i]</code>是以<code>a[i]</code>结尾的最长上升子序列的值，那么我们可以找到递推式，<br><img src="/2018/04/18/动态规划/4-.PNG" alt=""></p><p>我们可以进行一系列的优化：<br><img src="/2018/04/18/动态规划/DP-nlogn.PNG" alt="">我们主要通过二分来优化。<br><img src="/2018/04/18/动态规划/dpcode.PNG" alt=""><br>由于该做法并没有直接算出最终子序列的结果，我们可以通过一个pre数组来指定该字符之前的字符号码。</p><h2 id="数字三角形EXT"><a href="#数字三角形EXT" class="headerlink" title="数字三角形EXT"></a>数字三角形EXT</h2><p>想必大家都知道数字三角形的原型了。<br>我们来看几个变形：</p><ul><li>将原问题中的使路径和最大改成使路径和模m最大。<br>做法如下：<br><img src="/2018/04/18/动态规划/5-.PNG" alt=""></li><li>增加路径必须经过第r行，第c列这个条件<br>做法：<br>1）以（r，c）为头节点做一次DP，以（r，c）为底做一次DP<br>2）在该位置增加一个极大的权值，最后的答案减去这个数（我们保证DP过程一定会经过该节点）。</li></ul><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><p>我已经写了<a href="http://jamence.top/2018/03/10/%E8%83%8C%E5%8C%85/" target="_blank" rel="noopener">一部分</a>，<br>还有比较复杂的变种</p><h3 id="二维背包"><a href="#二维背包" class="headerlink" title="二维背包"></a>二维背包</h3><p>之前咱们的背包只是讨论了一维空间的限制情况，二维背包指的是对于每件物品，具有两种不同的费用，选择这件物品必须同时付出这两种代价，对于每种代价都有一个可以付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。<br>咱们可以多加一个维度的状态便可以实现。<br><img src="/2018/04/18/动态规划/6.PNG" alt=""><br>同样咱们可以降维度，使用二维的数组。</p><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><p>有N件物品和一个容量为V的背包，第i件物品的费用是c[i],价值是w[i]，这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可以是这些物品的费用总和不超过背包容量，且价值总和最大。<br>咱们设f[k][v]表示前k组物品花费费用用v能取得的最大权值。<br>f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]},其中物品i属于组k<br><img src="/2018/04/18/动态规划/7.PNG" alt=""><br>咱们先枚举组，枚举容量，枚举物品。</p><h1 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h1><p>顾名思义，就是在区间上进行动态规划。<br>就是说，这类问题在进行一次决策之后，<strong>决策</strong>区间会有一个大区间分成两个小区间，问题也由一个规模较大的问题分解成两个规模较小的问题。<br>咱们就可以从长度较小的区间向长度较长的区间进行递推。<br>应用：</p><h2 id="通过区间DP，求解回文数"><a href="#通过区间DP，求解回文数" class="headerlink" title="通过区间DP，求解回文数"></a>通过区间DP，求解<a href="http://jamence.top/2018/03/18/%E5%9B%9E%E6%96%87%E4%B8%B2/" target="_blank" rel="noopener">回文数</a></h2><h2 id="矩阵最右连乘问题"><a href="#矩阵最右连乘问题" class="headerlink" title="矩阵最右连乘问题"></a>矩阵最右连乘问题</h2><p>考虑最后一次做乘法的为位置，这会将原问题分解成两个规模较小的子问题，咱们需要枚举最后一次乘法的位置，转移的复杂度是O(n),同时合法的子区间个数存在n平方<br>总的时间复杂度是n三次方。<br><img src="/2018/04/18/动态规划/8.PNG" alt=""></p><ul><li>括号匹配<br><img src="/2018/04/18/动态规划/9.PNG" alt=""><br><img src="/2018/04/18/动态规划/10.PNG" alt=""><br>1）使用卡塔兰数（出入栈的一种计算总个数的方法）<br>2）区间DP<br><img src="/2018/04/18/动态规划/11.PNG" alt=""><br><img src="/2018/04/18/动态规划/12.PNG" alt=""><h2 id="石子归并"><a href="#石子归并" class="headerlink" title="石子归并"></a>石子归并</h2>如果不要求相邻的石子，最小生成树<br>如果要求：<br><code>dp[i][j]=min{dp[i][k]+dp[k+1][j]}+a[i]+......+a[j]</code><br><img src="/2018/04/18/动态规划/13.PNG" alt=""><br>如果石子不是沿着直线排列，而是连成一个环，那怎么办<br>1）枚举还断开的时间，n4方的时间复杂度<br>2）将原石子复制一份接在后面，令a[n+i]=a[i]，在长度为2n的石子串上做区间DP（对整体做区间DP，但是咱们得出结果是只是dp[i][i+n],i从1到n）<h2 id="决策单调性与不等式优化"><a href="#决策单调性与不等式优化" class="headerlink" title="决策单调性与不等式优化"></a>决策单调性与不等式优化</h2>咱们甚至存在石子归并最初问题的n平方的时间复杂度。<br><img src="/2018/04/18/动态规划/14.PNG" alt=""><br>这就是四边形不等式优化<br><img src="/2018/04/18/动态规划/15.PNG" alt=""><h1 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h1></li><li>通常动态规划是线性的，一般在有向无环图上进行</li><li>树形DP是在树这种数据结构上进行的动态规划</li><li>树形DP有两种方向，自顶向下，自底向上</li><li>叶-&gt;根：在回溯的时候从叶子节点往上更新信息</li><li>根-&gt;叶：往往在从叶子往根dfs之后，在重新往下获得最后的答案。</li></ul><h2 id="没有上司的舞会（超级经典）"><a href="#没有上司的舞会（超级经典）" class="headerlink" title="没有上司的舞会（超级经典）"></a>没有上司的舞会（超级经典）</h2><p><img src="/2018/04/18/动态规划/16.PNG" alt=""></p><p>代码：</p><p><img src="/2018/04/18/动态规划/17.PNG" alt=""></p><h2 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h2><p><img src="/2018/04/18/动态规划/18.PNG" alt=""></p><p>代码：</p><p><img src="/2018/04/18/动态规划/19.PNG" alt=""></p><h2 id="树上最远距离"><a href="#树上最远距离" class="headerlink" title="树上最远距离"></a>树上最远距离</h2><p><img src="/2018/04/18/动态规划/20.PNG" alt=""></p><p>分析：</p><p><img src="/2018/04/18/动态规划/21.PNG" alt=""></p><p>代码：</p><p><img src="/2018/04/18/动态规划/22.PNG" alt=""></p><p>感谢B站西北工业大学上传的视频</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/04/18/动态规划/index.jpg&quot; alt=&quot;宇智波佐助&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;线性DP&quot;&gt;&lt;a href=&quot;#线性DP&quot; class=&quot;headerlink&quot; title=&quot;线性DP&quot;&gt;&lt;/a&gt;线性DP&lt;/h1&gt;&lt;h2 id=
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>简单博弈</title>
    <link href="http://yoursite.com/2018/03/29/%E7%AE%80%E5%8D%95%E5%8D%9A%E5%BC%88/"/>
    <id>http://yoursite.com/2018/03/29/简单博弈/</id>
    <published>2018-03-29T08:41:43.000Z</published>
    <updated>2018-03-29T08:49:09.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/29/简单博弈/index.jpg" alt=""></p><h1 id="博弈"><a href="#博弈" class="headerlink" title="博弈"></a>博弈</h1><p>我们就讨论简单博弈吧，复杂的我也不会呀</p><h2 id="巴什博弈"><a href="#巴什博弈" class="headerlink" title="巴什博弈"></a>巴什博弈</h2><ul><li><p>问题描述：</p><blockquote><p>只有一堆n个物品，两个人轮流从这堆物品中取物，规<br>定每次至少取一个，最多取m个。最后取光者得胜。</p></blockquote></li><li><p>解决方法<br>显然，如果<code>n=m+1</code>，那么由于一次最多只能取<code>m</code>个，所以，无论先取者拿走多少个，后取者都能够一次拿走剩余的物品，后者取胜。因此我们发现了如何取胜的法则：如果<code>n=（m+1）r+s</code>，（r为任意自然数，s≤m),那么先取者要拿走<code>s</code>个物品，如果后取者拿走<code>k（≤m)</code>个，那么先取者再拿走<code>m+1-k</code>个，结果剩下<code>（m+1）（r-1）</code>个，以后保持这样的取法，那么先取者肯定获胜。总之，要保持给对手留下<code>（m+1）</code>的倍数，就能最后获胜。这个游戏还可以有一种变相的玩法：两个人轮流报数，每次至少报一个，最多报十个，谁能报到100者胜。</p></li></ul><h2 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h2><ul><li><p>问题描述：</p><blockquote><p>有两堆各若干个物品，两个人轮流从某一堆或同<br>时从两堆中取同样多的物品，规定每次至少取一个，多者不限，最后取光者得胜。</p></blockquote></li><li><p>解决方法<br>这种情况下是颇为复杂的。我们用<code>（ak，bk）（ak ≤ bk ,k=0，1，2，…,n)</code>表示两堆物品的数量并称其为局势，如果甲面对（0，0），那么甲已经输了，这种局势我们称为<code>奇异局势</code>。前几个奇异局势是：（0，0）、（1，2）、（3，5）、（4，7）、（6，10）、（8，13）、（9，15）、（11，18）、（12，20）。可以看出,a0=b0=0,ak是未在前面出现过的最小自然数,而 bk= ak + k，奇异局势有<br>如下三条性质：<br>  1。任何自然数都包含在一个且仅有一个奇异局势中。<br>  由于ak是未在前面出现过的最小自然数，所以有<code>ak &gt; ak-1</code>，而 <code>bk= ak + k &gt; ak-1 + k-1 = bk-1 &gt; ak-1</code> 。所以性质1。成立。</p><p>  2。任意操作都可将奇异局势变为非奇异局势。<br>  事实上，若只改变奇异局势（ak，bk）的某一个分量，那么另一个分量不可能在其他奇异局势中，所以必然是非奇异局势。如果使（ak，bk）的两个分量同时减少，则由于其差不变，且不可能是其他奇异局势的差，因此也是非奇异局势。</p><p>  3。采用适当的方法，可以将非奇异局势变为奇异局势。<br>  假设面对的局势是（a,b），若 b = a，则同时从两堆中取走 a 个物体，就变为了奇异局势（0，0）；如果a = ak ，b &gt; bk，那么，取走b  – bk个物体，即变为奇异局势；如果 a = ak ，  b &lt; bk ,则同时从两堆中拿走 ak – ab + ak个物体,变为奇异局势（ ab – ak , ab – ak+ b – ak）；如果a &gt; ak ，b= ak + k,则从第一堆中拿走多余的数量a – ak 即可；如果a &lt; ak ，b= ak + k,分两种情况，第一种，a=aj （j &lt; k）,从第二堆里面拿走 b – bj 即可；第二种，a=bj （j &lt; k）,从第二堆里面拿走 b – aj 即可。从如上性质可知，两个人如果都采用正确操作，那么面对非奇异局势，先拿者必胜；反之，则后拿者取胜。<br>  那么任给一个局势（a，b），怎样判断它是不是奇异局势呢？我们有如下公式：<br>  <code>ak =[k（1+√5）/2]，bk= ak + k</code>（k=0，1，2，…,n 方括号表示取整函数)奇妙的是其中出现了黄金分割数（1+√5）/2 = 1.618…,因此,由ak，bk组成的矩形近似为黄金矩形，由于2/（1+√5）=（√5-1）/2，可以先求出j=[a（√5-1）/2]，若a=[j（1+√5）/2]，那么a = aj，bj = aj + j，若不等于，那么a = aj+1，bj+1 = aj+1+ j + 1，若都不是，那么就不是奇异局势。然后再按照上述法则进行，一定会遇到奇异局势。</p></li></ul><h2 id="尼姆博弈"><a href="#尼姆博弈" class="headerlink" title="尼姆博弈"></a>尼姆博弈</h2><ul><li><p>问题描述</p><blockquote><p>有三堆各若干个物品，两个人轮流从某一堆取任意多的<br>物品，规定每次至少取一个，多者不限，最后取光者得胜。</p></blockquote></li><li><p>解决方法<br>这种情况最有意思，它与二进制有密切关系，我们用（a，b，c）表示某种局势，首<br>先（0，0，0）显然是奇异局势，无论谁面对奇异局势，都必然失败。第二种奇异局势是<br>（0，n，n），只要与对手拿走一样多的物品，最后都将导致（0，0，0）。仔细分析一<br>下，（1，2，3）也是奇异局势，无论对手如何拿，接下来都可以变为（0，n，n）的情<br>形。<br>  计算机算法里面有一种叫做按位模2加，也叫做异或的运算，我们用符号（+）表示<br>这种运算。这种运算和一般加法不同的一点是1+1=0。先看（1，2，3）的按位模2加的结<br>果：<br>1 =二进制01<br>2 =二进制10<br>3 =二进制11 （+）<br>———————<br>0 =二进制00 （注意不进位）<br>  对于奇异局势（0，n，n）也一样，结果也是0。<br>  任何奇异局势（a，b，c）都有a（+）b（+）c =0。<br>如果我们面对的是一个非奇异局势（a，b，c），要如何变为奇异局势呢？假设 a &lt; b<br>&lt; c,我们只要将 c 变为 a（+）b,即可,因为有如下的运算结果: a（+）b（+）(a（+）<br>b)=(a（+）a)（+）(b（+）b)=0（+）0=0。要将c 变为a（+）b，只要从 c中减去 c-（<br>a（+）b）即可。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/29/简单博弈/index.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;博弈&quot;&gt;&lt;a href=&quot;#博弈&quot; class=&quot;headerlink&quot; title=&quot;博弈&quot;&gt;&lt;/a&gt;博弈&lt;/h1&gt;&lt;p&gt;我们就讨论简单博弈吧，复杂的我也不
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="博弈" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="http://yoursite.com/2018/03/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://yoursite.com/2018/03/29/线段树/</id>
    <published>2018-03-29T08:41:26.000Z</published>
    <updated>2018-03-29T09:37:15.901Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/29/线段树/index.jpg" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。<br>使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，时间复杂度为O(logN）。而未优化的空间复杂度为2N，实际应用时一般还要开4N的数组以免越界，因此有时需要离散化让空间压缩。<br>这是百度百科的解释，我理解的还比较浅，不是特别理解<br>这里有一篇讲的比较好的<a href="https://blog.csdn.net/zearot/article/details/52280189" target="_blank" rel="noopener">博客</a>可以推荐一下。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>注意的事项：</p><ul><li>maxn 是题目给的最大区间,而节点数要开4 倍,确切的来说节点数要开大于maxn 的最小<br><code>pow(2,x)</code>的两倍</li><li>lson 和rson 分辨表示结点的左儿子和右儿子,由于每次传参数的时候都固定是这几个变<br>量,所以可以用预定于比较方便的表示</li><li>PushUP(int rt)是把当前结点的信息更新到父结点</li><li>PushDown(int rt)是把当前结点的信息更新给儿子结点</li><li><p>rt 表示当前子树的根(root),也就是当前所在的结点</p><h1 id="四大类别"><a href="#四大类别" class="headerlink" title="四大类别"></a>四大类别</h1><h2 id="单点更新"><a href="#单点更新" class="headerlink" title="单点更新"></a>单点更新</h2><p>只更新叶子节点,然后把信息用PushUP(int r)这个函数更新<br>上来<br>示例：</p></li><li><p>hdu1166(update:单点增减query:区间求和)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 55555;</span><br><span class="line">int sum[maxn&lt;&lt;2];</span><br><span class="line">void PushUP(int rt) &#123;</span><br><span class="line">    sum[rt] = sum[rt&lt;&lt;1] + sum[rt&lt;&lt;1|1];</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int rt) &#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;sum[rt]);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">&#125;</span><br><span class="line">void update(int p,int add,int l,int r,int rt) &#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        sum[rt] += add;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (p &lt;= m) update(p , add , lson);</span><br><span class="line">    else update(p , add , rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">&#125;</span><br><span class="line">int query(int L,int R,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        return sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    int ret = 0;</span><br><span class="line">    if (L &lt;= m) ret += query(L , R , lson);</span><br><span class="line">    if (R &gt; m) ret += query(L , R , rson);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int T , n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    for (int cas = 1 ; cas &lt;= T ; cas ++) &#123;</span><br><span class="line">        printf(&quot;Case %d:\n&quot;,cas);</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">        build(1 , n , 1);</span><br><span class="line">        char op[10];</span><br><span class="line">        while (scanf(&quot;%s&quot;,op)) &#123;</span><br><span class="line">            if (op[0] == &apos;E&apos;) break;</span><br><span class="line">            int a,b;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">            if (op[0] == &apos;Q&apos;) printf(&quot;%d\n&quot;,query(a , b , 1 , n ,1));</span><br><span class="line">            else if (op[0] == &apos;S&apos;) update(a , -b , 1 , n , 1);</span><br><span class="line">            else update(a , b , 1 , n , 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hdu1754(update:单点替换query:区间最值)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 222222;</span><br><span class="line">int MAX[maxn&lt;&lt;2];</span><br><span class="line">void PushUP(int rt) &#123;</span><br><span class="line">    MAX[rt] = max(MAX[rt&lt;&lt;1] , MAX[rt&lt;&lt;1|1]);</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int rt) &#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;MAX[rt]);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">&#125;</span><br><span class="line">void update(int p,int sc,int l,int r,int rt) &#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        MAX[rt] = sc;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (p &lt;= m) update(p , sc , lson);</span><br><span class="line">    else update(p , sc , rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">&#125;</span><br><span class="line">int query(int L,int R,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        return MAX[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    int ret = 0;</span><br><span class="line">    if (L &lt;= m) ret = max(ret , query(L , R , lson));</span><br><span class="line">    if (R &gt; m) ret = max(ret , query(L , R , rson));</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n , m;</span><br><span class="line">    while (~scanf(&quot;%d%d&quot;,&amp;n,&amp;m)) &#123;</span><br><span class="line">        build(1 , n , 1);</span><br><span class="line">        while (m --) &#123;</span><br><span class="line">            char op[2];</span><br><span class="line">            int a , b;</span><br><span class="line">            scanf(&quot;%s%d%d&quot;,op,&amp;a,&amp;b);</span><br><span class="line">            if (op[0] == &apos;Q&apos;) printf(&quot;%d\n&quot;,query(a , b , 1 , n ,1));</span><br><span class="line">            else update(a , b , 1 , n , 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hdu1394(update:单点增减query:区间求和)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 5555;</span><br><span class="line">int sum[maxn&lt;&lt;2];</span><br><span class="line">void PushUP(int rt) &#123;</span><br><span class="line">    sum[rt] = sum[rt&lt;&lt;1] + sum[rt&lt;&lt;1|1];</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int rt) &#123;</span><br><span class="line">    sum[rt] = 0;</span><br><span class="line">    if (l == r) return ;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line">void update(int p,int l,int r,int rt) &#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        sum[rt] ++;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (p &lt;= m) update(p , lson);</span><br><span class="line">    else update(p , rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">&#125;</span><br><span class="line">int query(int L,int R,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        return sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    int ret = 0;</span><br><span class="line">    if (L &lt;= m) ret += query(L , R , lson);</span><br><span class="line">    if (R &gt; m) ret += query(L , R , rson);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">int x[maxn];</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (~scanf(&quot;%d&quot;,&amp;n)) &#123;</span><br><span class="line">        build(0 , n - 1 , 1);</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0 ; i &lt; n ; i ++) &#123;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;x[i]);</span><br><span class="line">            sum += query(x[i] , n - 1 , 0 , n - 1 , 1);</span><br><span class="line">            update(x[i] , 0 , n - 1 , 1);</span><br><span class="line">        &#125;</span><br><span class="line">        int ret = sum;</span><br><span class="line">        for (int i = 0 ; i &lt; n ; i ++) &#123;</span><br><span class="line">            sum += n - x[i] - x[i] - 1;</span><br><span class="line">            ret = min(ret , sum);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hdu2795(query:区间求最大值的位子(直接把update 的操作在query 里做了))</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 222222;</span><br><span class="line">int h , w , n;</span><br><span class="line">int MAX[maxn&lt;&lt;2];</span><br><span class="line">void PushUP(int rt) &#123;</span><br><span class="line">    MAX[rt] = max(MAX[rt&lt;&lt;1] , MAX[rt&lt;&lt;1|1]);</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int rt) &#123;</span><br><span class="line">    MAX[rt] = w;</span><br><span class="line">    if (l == r) return ;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line">int query(int x,int l,int r,int rt) &#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        MAX[rt] -= x;</span><br><span class="line">        return l;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    int ret = (MAX[rt&lt;&lt;1] &gt;= x) ? query(x , lson) : query(x , rson);</span><br><span class="line">    PushUP(rt);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    while (~scanf(&quot;%d%d%d&quot;,&amp;h,&amp;w,&amp;n)) &#123;</span><br><span class="line">        if (h &gt; n) h = n;</span><br><span class="line">        build(1 , h , 1);</span><br><span class="line">        while (n --) &#123;</span><br><span class="line">            int x;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">            if (MAX[1] &lt; x) puts(&quot;-1&quot;);</span><br><span class="line">            else printf(&quot;%d\n&quot;,query(x , 1 , h , 1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="段更新"><a href="#段更新" class="headerlink" title="段更新"></a>段更新</h2><p>需要用到延迟标记(或者说懒惰标记),简单来说<br>就是每次更新的时候不要更新到底,用延迟标记使得更新延迟到下次需要更新or 询问到的时候</p><ul><li>hdu1698（update:成段替换(由于只query 一次总区间,所以可以直接输出1 结点）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 111111;</span><br><span class="line">int h , w , n;</span><br><span class="line">int col[maxn&lt;&lt;2];</span><br><span class="line">int sum[maxn&lt;&lt;2];</span><br><span class="line">void PushUp(int rt) &#123;</span><br><span class="line">    sum[rt] = sum[rt&lt;&lt;1] + sum[rt&lt;&lt;1|1];</span><br><span class="line">&#125;</span><br><span class="line">void PushDown(int rt,int m) &#123;</span><br><span class="line">    if (col[rt]) &#123;</span><br><span class="line">        col[rt&lt;&lt;1] = col[rt&lt;&lt;1|1] = col[rt];</span><br><span class="line">        sum[rt&lt;&lt;1] = (m - (m &gt;&gt; 1)) * col[rt];</span><br><span class="line">        sum[rt&lt;&lt;1|1] = (m &gt;&gt; 1) * col[rt];</span><br><span class="line">        col[rt] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int rt) &#123;</span><br><span class="line">    col[rt] = 0;</span><br><span class="line">    sum[rt] = 1;</span><br><span class="line">    if (l == r) return ;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int c,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        col[rt] = c;</span><br><span class="line">        sum[rt] = c * (r - l + 1);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(rt , r - l + 1);</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (L &lt;= m) update(L , R , c , lson);</span><br><span class="line">    if (R &gt; m) update(L , R , c , rson);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int T , n , m;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    for (int cas = 1 ; cas &lt;= T ; cas ++) &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">        build(1 , n , 1);</span><br><span class="line">        while (m --) &#123;</span><br><span class="line">            int a , b , c;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            update(a , b , c , 1 , n , 1);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Case %d: The total value of the hook is %d.\n&quot;,cas , sum[1]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>poj3468(update:成段增减query:区间求和)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">#define LL long long</span><br><span class="line">const int maxn = 111111;</span><br><span class="line">LL add[maxn&lt;&lt;2];</span><br><span class="line">LL sum[maxn&lt;&lt;2];</span><br><span class="line">void PushUp(int rt) &#123;</span><br><span class="line">    sum[rt] = sum[rt&lt;&lt;1] + sum[rt&lt;&lt;1|1];</span><br><span class="line">&#125;</span><br><span class="line">void PushDown(int rt,int m) &#123;</span><br><span class="line">    if (add[rt]) &#123;</span><br><span class="line">        add[rt&lt;&lt;1] += add[rt];</span><br><span class="line">        add[rt&lt;&lt;1|1] += add[rt];</span><br><span class="line">        sum[rt&lt;&lt;1] += add[rt] * (m - (m &gt;&gt; 1));</span><br><span class="line">        sum[rt&lt;&lt;1|1] += add[rt] * (m &gt;&gt; 1);</span><br><span class="line">        add[rt] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void build(int l,int r,int rt) &#123;</span><br><span class="line">    add[rt] = 0;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        scanf(&quot;%lld&quot;,&amp;sum[rt]);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int c,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        add[rt] += c;</span><br><span class="line">        sum[rt] += (LL)c * (r - l + 1);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(rt , r - l + 1);</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (L &lt;= m) update(L , R , c , lson);</span><br><span class="line">    if (m &lt; R) update(L , R , c , rson);</span><br><span class="line">    PushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line">LL query(int L,int R,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        return sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(rt , r - l + 1);</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    LL ret = 0;</span><br><span class="line">    if (L &lt;= m) ret += query(L , R , lson);</span><br><span class="line">    if (m &lt; R) ret += query(L , R , rson);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int N , Q;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;N,&amp;Q);</span><br><span class="line">    build(1 , N , 1);</span><br><span class="line">    while (Q --) &#123;</span><br><span class="line">        char op[2];</span><br><span class="line">        int a , b , c;</span><br><span class="line">        scanf(&quot;%s&quot;,op);</span><br><span class="line">        if (op[0] == &apos;Q&apos;) &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">            printf(&quot;%lld\n&quot;,query(a , b , 1 , N , 1));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            update(a , b , c , 1 , N , 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><ul><li>hdu1542(矩形面积并)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 2222;</span><br><span class="line">int cnt[maxn &lt;&lt; 2];</span><br><span class="line">double sum[maxn &lt;&lt; 2];</span><br><span class="line">double X[maxn];</span><br><span class="line">struct Seg &#123;</span><br><span class="line">    double h , l , r;</span><br><span class="line">    int s;</span><br><span class="line">    Seg()&#123;&#125;</span><br><span class="line">    Seg(double a,double b,double c,int d) : l(a) , r(b) , h(c) , s(d) &#123;&#125;</span><br><span class="line">    bool operator &lt; (const Seg &amp;cmp) const &#123;</span><br><span class="line">        return h &lt; cmp.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;ss[maxn];</span><br><span class="line">void PushUp(int rt,int l,int r) &#123;</span><br><span class="line">    if (cnt[rt]) sum[rt] = X[r+1] - X[l];</span><br><span class="line">    else if (l == r) sum[rt] = 0;</span><br><span class="line">    else sum[rt] = sum[rt&lt;&lt;1] + sum[rt&lt;&lt;1|1];</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int c,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        cnt[rt] += c;</span><br><span class="line">        PushUp(rt , l , r);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (L &lt;= m) update(L , R , c , lson);</span><br><span class="line">    if (m &lt; R) update(L , R , c , rson);</span><br><span class="line">    PushUp(rt , l , r);</span><br><span class="line">&#125;</span><br><span class="line">int Bin(double key,int n,double X[]) &#123;</span><br><span class="line">    int l = 0 , r = n - 1;</span><br><span class="line">    while (l &lt;= r) &#123;</span><br><span class="line">        int m = (l + r) &gt;&gt; 1;</span><br><span class="line">        if (X[m] == key) return m;</span><br><span class="line">        if (X[m] &lt; key) l = m + 1;</span><br><span class="line">        else r = m - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n , cas = 1;</span><br><span class="line">    while (~scanf(&quot;%d&quot;,&amp;n) &amp;&amp; n) &#123;</span><br><span class="line">        int m = 0;</span><br><span class="line">        while (n --) &#123;</span><br><span class="line">            double a , b , c , d;</span><br><span class="line">            scanf(&quot;%lf%lf%lf%lf&quot;,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">            X[m] = a;</span><br><span class="line">            ss[m++] = Seg(a , c , b , 1);</span><br><span class="line">            X[m] = c;</span><br><span class="line">            ss[m++] = Seg(a , c , d , -1);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(X , X + m);</span><br><span class="line">        sort(ss , ss + m);</span><br><span class="line">        int k = 1;</span><br><span class="line">        for (int i = 1 ; i &lt; m ; i ++) &#123;</span><br><span class="line">            if (X[i] != X[i-1]) X[k++] = X[i];</span><br><span class="line">        &#125;</span><br><span class="line">        memset(cnt , 0 , sizeof(cnt));</span><br><span class="line">        memset(sum , 0 , sizeof(sum));</span><br><span class="line">        double ret = 0;</span><br><span class="line">        for (int i = 0 ; i &lt; m - 1 ; i ++) &#123;</span><br><span class="line">            int l = Bin(ss[i].l , k , X);</span><br><span class="line">            int r = Bin(ss[i].r , k , X) - 1;</span><br><span class="line">            if (l &lt;= r) update(l , r , ss[i].s , 0 , k - 1, 1);</span><br><span class="line">            ret += sum[1] * (ss[i+1].h - ss[i].h);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Test case #%d\nTotal explored area: %.2lf\n\n&quot;,cas++ , ret);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hdu1828<br>思路:与面积不同的地方是还要记录竖的边有几个(numseg 记录),并且当边界重合<br>的时候需要合并(用lbd 和rbd 表示边界来辅助)<br>线段树操作:update:区间增减query:直接取根节点的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define lson l , m , rt &lt;&lt; 1</span><br><span class="line">#define rson m + 1 , r , rt &lt;&lt; 1 | 1</span><br><span class="line">const int maxn = 22222;</span><br><span class="line">struct Seg&#123;</span><br><span class="line">    int l , r , h , s;</span><br><span class="line">    Seg() &#123;&#125;</span><br><span class="line">    Seg(int a,int b,int c,int d):l(a) , r(b) , h(c) , s(d) &#123;&#125;</span><br><span class="line">    bool operator &lt; (const Seg &amp;cmp) const &#123;</span><br><span class="line">        if (h == cmp.h) return s &gt; cmp.s;</span><br><span class="line">        return h &lt; cmp.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ss[maxn];</span><br><span class="line">bool lbd[maxn&lt;&lt;2] , rbd[maxn&lt;&lt;2];</span><br><span class="line">int numseg[maxn&lt;&lt;2];</span><br><span class="line">int cnt[maxn&lt;&lt;2];</span><br><span class="line">int len[maxn&lt;&lt;2];</span><br><span class="line">void PushUP(int rt,int l,int r) &#123;</span><br><span class="line">    if (cnt[rt]) &#123;</span><br><span class="line">        lbd[rt] = rbd[rt] = 1;</span><br><span class="line">        len[rt] = r - l + 1;</span><br><span class="line">        numseg[rt] = 2;</span><br><span class="line">    &#125; else if (l == r) &#123;</span><br><span class="line">        len[rt] = numseg[rt] = lbd[rt] = rbd[rt] = 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        lbd[rt] = lbd[rt&lt;&lt;1];</span><br><span class="line">        rbd[rt] = rbd[rt&lt;&lt;1|1];</span><br><span class="line">        len[rt] = len[rt&lt;&lt;1] + len[rt&lt;&lt;1|1];</span><br><span class="line">        numseg[rt] = numseg[rt&lt;&lt;1] + numseg[rt&lt;&lt;1|1];</span><br><span class="line">        if (lbd[rt&lt;&lt;1|1] &amp;&amp; rbd[rt&lt;&lt;1]) numseg[rt] -= 2;//两条线重合</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void update(int L,int R,int c,int l,int r,int rt) &#123;</span><br><span class="line">    if (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">        cnt[rt] += c;</span><br><span class="line">        PushUP(rt , l , r);</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int m = (l + r) &gt;&gt; 1;</span><br><span class="line">    if (L &lt;= m) update(L , R , c , lson);</span><br><span class="line">    if (m &lt; R) update(L , R , c , rson);</span><br><span class="line">    PushUP(rt , l , r);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int n;</span><br><span class="line">    while (~scanf(&quot;%d&quot;,&amp;n)) &#123;</span><br><span class="line">        int m = 0;</span><br><span class="line">        int lbd = 10000, rbd = -10000;</span><br><span class="line">        for (int i = 0 ; i &lt; n ; i ++) &#123;</span><br><span class="line">            int a , b , c , d;</span><br><span class="line">            scanf(&quot;%d%d%d%d&quot;,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">            lbd = min(lbd , a);</span><br><span class="line">            rbd = max(rbd , c);</span><br><span class="line">            ss[m++] = Seg(a , c , b , 1);</span><br><span class="line">            ss[m++] = Seg(a , c , d , -1);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(ss , ss + m);</span><br><span class="line">        int ret = 0 , last = 0;</span><br><span class="line">        for (int i = 0 ; i &lt; m ; i ++) &#123;</span><br><span class="line">            if (ss[i].l &lt; ss[i].r) update(ss[i].l , ss[i].r - 1 ,</span><br><span class="line">            ss[i].s , lbd , rbd - 1 , 1);</span><br><span class="line">            ret += numseg[1] * (ss[i+1].h - ss[i].h);</span><br><span class="line">            ret += abs(len[1] - last);</span><br><span class="line">            last = len[1];</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,ret);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/29/线段树/index.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;线段树是一种二叉搜索树，与区间树相似
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二分</title>
    <link href="http://yoursite.com/2018/03/18/%E4%BA%8C%E5%88%86/"/>
    <id>http://yoursite.com/2018/03/18/二分/</id>
    <published>2018-03-18T13:51:54.000Z</published>
    <updated>2018-03-18T14:11:45.936Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/18/二分/index.jpg" alt="Naruto"></p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>大家应该都知道二分查找，那直接从它的作用来说吧</p><h2 id="从有序数组中查找某一个数"><a href="#从有序数组中查找某一个数" class="headerlink" title="从有序数组中查找某一个数"></a>从有序数组中查找某一个数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int n,k;</span><br><span class="line">int a[maxn];</span><br><span class="line">void solve()&#123;</span><br><span class="line">    //注意lb和ub</span><br><span class="line">    int lb=-1,ub=n;</span><br><span class="line">    while(ub-lb&gt;1)&#123;</span><br><span class="line">        int mid=(lb+ub)/2;</span><br><span class="line">        if(a[mid]&gt;=k)&#123;</span><br><span class="line">            ub=mid;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            lb=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //这时，lb+1=ub</span><br><span class="line">    printf(&quot;%d\n&quot;,ub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断一个解并判断是否可行"><a href="#判断一个解并判断是否可行" class="headerlink" title="判断一个解并判断是否可行"></a>判断一个解并判断是否可行</h2><p>我们可以在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(a[mid]&gt;=k)&#123;</span><br><span class="line">            ub=mid;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            lb=mid;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>把a[mid]改成C(mid)判断是否可行。        </p><h2 id="最大化最小值"><a href="#最大化最小值" class="headerlink" title="最大化最小值"></a>最大化最小值</h2><h2 id="最大化平均值"><a href="#最大化平均值" class="headerlink" title="最大化平均值"></a>最大化平均值</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/18/二分/index.jpg&quot; alt=&quot;Naruto&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h1&gt;&lt;p&gt;大家应该都
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="二分查找" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>数论</title>
    <link href="http://yoursite.com/2018/03/18/%E6%95%B0%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/03/18/数论/</id>
    <published>2018-03-18T13:14:47.000Z</published>
    <updated>2018-03-18T13:44:39.310Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/18/数论/index.jpg" alt="宇智波佐助"></p><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><p>数论是一个比较大的话题，慢慢更</p><h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h2><p><a href="http://jamence.top/2018/03/17/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/" target="_blank" rel="noopener">素数</a></p><h2 id="母函数"><a href="#母函数" class="headerlink" title="母函数"></a>母函数</h2><p><a href="http://jamence.top/categories/Algorithm/" target="_blank" rel="noopener">母函数</a></p><h2 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//欧几里得，又叫做最大公约数</span><br><span class="line">int gcd(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">return b==0?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int gcd(int big, int small)</span><br><span class="line">&#123;</span><br><span class="line">    if (small &gt; big) swap(big, small);</span><br><span class="line">    int temp;</span><br><span class="line">    while (small != 0)&#123; //  辗转相除法</span><br><span class="line">        if (small &gt; big) swap(big, small);</span><br><span class="line">        temp = big % small;</span><br><span class="line">        big = small;</span><br><span class="line">        small = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return(big);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//逆元</span><br><span class="line">gcd(a,b)=a*x+b*y;</span><br><span class="line">gcd(b,a%b,)</span><br><span class="line">ll extgcd(ll a,ll b,ll &amp;x,ll &amp;y)</span><br><span class="line">&#123;</span><br><span class="line">    if(b==0)&#123;</span><br><span class="line">        x=1,y=0;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=extgcd(b,a%b,x,y);</span><br><span class="line">    ll t=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=t-a/b*y;</span><br><span class="line">    return d;</span><br><span class="line">&#125;</span><br><span class="line">ll inv(ll a,ll mod)</span><br><span class="line">&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    extgcd(a,mod,x,y);</span><br><span class="line">    return (mod+x%mod)%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ll fast_pow(ll a,ll b,ll mod)</span><br><span class="line">&#123;</span><br><span class="line">    ll ans=1;</span><br><span class="line">    while(b)&#123;</span><br><span class="line">        if(b&amp;1)ans=ans*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">//快速幂</span><br></pre></td></tr></table></figure><h2 id="卡塔兰数"><a href="#卡塔兰数" class="headerlink" title="卡塔兰数"></a>卡塔兰数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ll Catelan[N];</span><br><span class="line">//用逆元求解</span><br><span class="line">ll extgcd(ll a, ll b, ll&amp; x, ll&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">    ll d = a;</span><br><span class="line">    if(b != 0)&#123;</span><br><span class="line">        d = extgcd(b, a % b, y, x);</span><br><span class="line">        y -= (a / b) * x;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        x = 1;</span><br><span class="line">        y = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void pre()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    ll x, y;</span><br><span class="line">    Catelan[0] = 1, Catelan[1] = 1;</span><br><span class="line">    for(i = 2; i &lt; N-5; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Catelan[i] = Catelan[i-1]*(4*i-2) % mod;</span><br><span class="line">        extgcd(i+1, mod, x, y);</span><br><span class="line">        Catelan[i] = (Catelan[i]*((x+mod)%mod)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵快速幂求逆元"><a href="#矩阵快速幂求逆元" class="headerlink" title="矩阵快速幂求逆元"></a>矩阵快速幂求逆元</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#define MAXN 100</span><br><span class="line">#define LL long long</span><br><span class="line">#define MOD 10000</span><br><span class="line">using namespace std;</span><br><span class="line">struct Matrix</span><br><span class="line">&#123;</span><br><span class="line">    LL a[MAXN][MAXN];</span><br><span class="line">    int r, c;//行数 列数</span><br><span class="line">&#125;;</span><br><span class="line">Matrix ori, res;//初始矩阵 和 结果矩阵</span><br><span class="line">void init()//初始化矩阵</span><br><span class="line">&#123;</span><br><span class="line">    memset(res.a, 0, sizeof(res.a));</span><br><span class="line">    res.r = 2; res.c = 2;</span><br><span class="line">    for(int i = 1; i &lt;= 2; i++)//构造单位矩阵</span><br><span class="line">        res.a[i][i] = 1;</span><br><span class="line">    ori.r = 2; ori.c = 2;</span><br><span class="line">    ori.a[1][1] = ori.a[1][2] = ori.a[2][1] = 1;</span><br><span class="line">    ori.a[2][2] = 0;</span><br><span class="line">&#125;</span><br><span class="line">Matrix multi(Matrix x, Matrix y)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix z;</span><br><span class="line">    memset(z.a, 0, sizeof(z.a));</span><br><span class="line">    z.r = x.r, z.c = y.c;//新矩阵行数等于x矩阵的行数 列数等于y矩阵的列数</span><br><span class="line">    for(int i = 1; i &lt;= x.r; i++)//x矩阵的行数</span><br><span class="line">    &#123;</span><br><span class="line">        for(int k = 1; k &lt;= x.c; k++)//矩阵x的列数等于矩阵y的行数 即x.c = y.r</span><br><span class="line">        &#123;</span><br><span class="line">            if(x.a[i][k] == 0) continue;//优化</span><br><span class="line">            for(int j = 1; j&lt;= y.c; j++)//y矩阵的列数</span><br><span class="line">                z.a[i][j] = (z.a[i][j] + (x.a[i][k] * y.a[k][j]) % MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return z;</span><br><span class="line">&#125;</span><br><span class="line">void Matrix_mod(int n)</span><br><span class="line">&#123;</span><br><span class="line">    while(n)//N次幂</span><br><span class="line">    &#123;</span><br><span class="line">        if(n &amp; 1)</span><br><span class="line">            res = multi(ori, res);</span><br><span class="line">        ori = multi(ori, ori);</span><br><span class="line">        n &gt;&gt;= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld\n&quot;, res.a[1][2] % MOD);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int N;</span><br><span class="line">    while(scanf(&quot;%d&quot;, &amp;N), N!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        init();//初始化单位矩阵</span><br><span class="line">        Matrix_mod(N);//矩阵快速幂</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斯特灵近似"><a href="#斯特灵近似" class="headerlink" title="斯特灵近似"></a>斯特灵近似</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ll steling(ll n)</span><br><span class="line">&#123;</span><br><span class="line">    return ll(log10(sqrt(4*acos(0.0)*n))+n*log10(n/exp(1.0)))+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/18/数论/index.jpg&quot; alt=&quot;宇智波佐助&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;数论&quot;&gt;&lt;a href=&quot;#数论&quot; class=&quot;headerlink&quot; title=&quot;数论&quot;&gt;&lt;/a&gt;数论&lt;/h1&gt;&lt;p&gt;数论是一个比较大的话题，慢慢
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>胡思乱想</title>
    <link href="http://yoursite.com/2018/03/18/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    <id>http://yoursite.com/2018/03/18/胡思乱想/</id>
    <published>2018-03-18T11:22:26.000Z</published>
    <updated>2018-03-18T11:55:10.742Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/18/胡思乱想/index.jpg" alt=""><br>果然，我还是喜欢胡思乱想。<br>我想去工作，为什么？<br>我认为自己需要社会学习的经历，需要<code>挣钱</code>，我想太多现在想要的东西，我想要更好的一切。一切都是钱哪，但是我又有一点遗憾，有一点失落。<br>我想去读研，我希望自己可以活出自己想要的姿态，疯狂玩，疯狂学习，结交更多的人。我的性格说实话很奇怪，我不太喜欢说话，但是我经常有奇怪的想法想要和别人分享，我时时说不出口，我比较自卑，过分在意他人的看法和行动，我试图去改，改不掉。<br>大学，是一个象牙塔，我还要呆在这里吗？<br>读研，我认为比较迎合我自己的性格，同时现在是人工智能的时代，读一个好的研究生未来你会得到更好的发展机遇。我的大学，在我看来本科教育很失败。理论很水，项目基本没有，实验室老师也不通知说要同学来学习或者招人。导致我们学校本科生我认为科研没有，理论知识比较薄弱，代码能力太差。不知道是不是中国大学计算机教育的一个普遍问题。<br>我认为自己喜欢难一点的东西，比如c++，比如linux下开发，比如算法和程序设计。不知道自己是喜欢装逼，喜欢获得优越感还是真的认为这个好。无所谓了，我就喜欢这些东西，中二就中二吧。<br>我又认为自己很懒散，我自认为比较努力，但是我没有一个具体的目标，具体的方向。起床不要太晚，作业不要全部不会写，考试不要太差就好了。我认为这样有很大问题。自己就像没有方向的芦苇，来一阵风，就像风吹的方向摇摆，只要不要太差就好了。说了要改变，没有一次做到，每次都向自己妥协，妥协。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/18/胡思乱想/index.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;果然，我还是喜欢胡思乱想。&lt;br&gt;我想去工作，为什么？&lt;br&gt;我认为自己需要社会学习的经历，需要&lt;code&gt;挣钱&lt;/code&gt;，我想太多现在想要的东西，我想要更好的一切。一切都
      
    
    </summary>
    
      <category term="Lifes" scheme="http://yoursite.com/categories/Lifes/"/>
    
    
  </entry>
  
  <entry>
    <title>前序，中序，后序遍历</title>
    <link href="http://yoursite.com/2018/03/18/%E5%89%8D%E5%BA%8F%EF%BC%8C%E4%B8%AD%E5%BA%8F%EF%BC%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2018/03/18/前序，中序，后序遍历/</id>
    <published>2018-03-18T09:29:42.000Z</published>
    <updated>2018-03-18T09:29:50.868Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/18/前序，中序，后序遍历/index.jpg" alt="宇智波斑"></p><h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p>我们知道树的遍历分为三种情况，前序，中序，后序，层序遍历<br>我们现在要讨论的问题是得知前序和中序，求得后序和层序遍历<br>或者得知后序和中序，求得前序和层序遍历</p><h2 id="得知后序和中序，计算层序"><a href="#得知后序和中序，计算层序" class="headerlink" title="得知后序和中序，计算层序"></a>得知后序和中序，计算层序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=40;</span><br><span class="line">int hou[maxn];</span><br><span class="line">int mid[maxn];</span><br><span class="line">struct node&#123;</span><br><span class="line">    int le;</span><br><span class="line">    int ri;</span><br><span class="line">&#125;tree[maxn];</span><br><span class="line">int dfs(int ma,int mb,int ha,int hb)&#123;</span><br><span class="line"> //   if(ma==0||mb==0||ha==0||hb==0)return 0;</span><br><span class="line">    if(ma&gt;mb)return 0;</span><br><span class="line">    int root=hou[hb];</span><br><span class="line">    int p1=ma;</span><br><span class="line">    int p2;</span><br><span class="line">    while(mid[p1]!=root)p1++;</span><br><span class="line">    p2=p1-ma;</span><br><span class="line">    tree[root].le=dfs(ma,ma+p2-1,ha,ha+p2-1);</span><br><span class="line">    tree[root].ri=dfs(p1+1,mb,ha+p2,hb-1);</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line">void bfs(int root)&#123;</span><br><span class="line">    queue&lt;int&gt;q;</span><br><span class="line">    q.push(root);</span><br><span class="line">    while(!q.empty())&#123;</span><br><span class="line">        int cur=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        if(cur!=root)cout&lt;&lt;&quot; &quot;;</span><br><span class="line">        cout&lt;&lt;cur;</span><br><span class="line">        int le,ri;</span><br><span class="line">        le=tree[cur].le;</span><br><span class="line">        ri=tree[cur].ri;</span><br><span class="line">        if(le)q.push(le);</span><br><span class="line">        if(ri)q.push(ri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while(cin&gt;&gt;n)&#123;</span><br><span class="line">        for(int i=0;i&lt;=n;i++)&#123;</span><br><span class="line">            tree[i].le=0;</span><br><span class="line">            tree[i].ri=0;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;n;i++)cin&gt;&gt;hou[i];</span><br><span class="line">        for(int i=0;i&lt;n;i++)cin&gt;&gt;mid[i];</span><br><span class="line">        int root=dfs(0,n-1,0,n-1);</span><br><span class="line">        bfs(root);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得知前序和中序，求得层序和这个类似。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/18/前序，中序，后序遍历/index.jpg&quot; alt=&quot;宇智波斑&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;树的遍历&quot;&gt;&lt;a href=&quot;#树的遍历&quot; class=&quot;headerlink&quot; title=&quot;树的遍历&quot;&gt;&lt;/a&gt;树的遍历&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="树形遍历" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>回文串</title>
    <link href="http://yoursite.com/2018/03/18/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://yoursite.com/2018/03/18/回文串/</id>
    <published>2018-03-18T09:17:01.000Z</published>
    <updated>2018-03-18T09:19:44.684Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/18/回文串/index.jpg" alt="宇智波鼬"></p><h1 id="回文串"><a href="#回文串" class="headerlink" title="回文串"></a>回文串</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>什么是回文串<br>“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。</p><h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><ul><li><p>循环中间节点，逐步向两边遍历</p></li><li><p>从两边向中间遍历。一次可以遍历两个，算法复杂度为nlogn</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int INF=0x3f3f3f3f;</span><br><span class="line">const int maxn=1000+10;</span><br><span class="line">int vis[maxn][maxn];</span><br><span class="line">string str;</span><br><span class="line">int p[maxn][maxn];</span><br><span class="line">int pa(int i,int j)&#123;</span><br><span class="line">    if(i&gt;=j)return 1;</span><br><span class="line">    if(str[i]!=str[j])return 0;</span><br><span class="line">    if(vis[i][j])return p[i][j];</span><br><span class="line">    vis[i][j]=1;</span><br><span class="line">    p[i][j]=pa(i+1,j-1);</span><br><span class="line">    return p[i][j];</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">while(getline(cin,str))&#123;</span><br><span class="line">        memset(vis,0,sizeof vis);</span><br><span class="line">        int ans=0;</span><br><span class="line">        int len=str.length();</span><br><span class="line">        for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">            for(int j=i;j&lt;len;j++)&#123;</span><br><span class="line">                if(pa(i,j))ans=max(ans,j-i+1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/18/回文串/index.jpg&quot; alt=&quot;宇智波鼬&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;回文串&quot;&gt;&lt;a href=&quot;#回文串&quot; class=&quot;headerlink&quot; title=&quot;回文串&quot;&gt;&lt;/a&gt;回文串&lt;/h1&gt;&lt;h2 id=&quot;概念：&quot;&gt;
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="回文串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>母函数</title>
    <link href="http://yoursite.com/2018/03/17/%E6%AF%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/03/17/母函数/</id>
    <published>2018-03-17T13:37:53.000Z</published>
    <updated>2018-03-17T14:53:14.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/17/母函数/index.jpg" alt="Uchiha Madara"></p><h1 id="母函数"><a href="#母函数" class="headerlink" title="母函数"></a>母函数</h1><h2 id="什么是母函数"><a href="#什么是母函数" class="headerlink" title="什么是母函数"></a>什么是母函数</h2><ul><li>普通型母函数</li></ul><p>对于如下等式：<br><code>(1+a1x)(1+a2x)···(1+a3x)</code>————————————————-（1）<br><code>=1+(a1+a2+···+an)x+(a1a2+a1a3+···+an-1an)x^2+···+a1a2···anx^n</code>–（2）<br>通过式（1），我们得到式（2），这就是母函数，在应用中，一般知道（1），我们通过（1），计算出（2）的系数。</p><p>对于序列a0,a1,a2,···构造一个函数：<br>G（x）=a0+a1x+a2X^2+···，<br>称函数G(x)是序列a0,a1,a2,···的母函数。</p><h2 id="母函数解决什么问题"><a href="#母函数解决什么问题" class="headerlink" title="母函数解决什么问题"></a>母函数解决什么问题</h2><p>我们举几个例子：</p><ul><li>若有1克，2克，3克，4克的砝码各一枚，能称出哪几种重量？各有几种可能方案？<br>我们假设x的指数表示称出的重量，<br>（1+x）表示一个1克砝码<br>（1+x^2）表示一个2克砝码<br>（1+x^3）表示一个3克砝码<br>（1+x^4）表示一个4克砝码<br><code>加上1的原因是可以选或者不选</code><br><code>(1+x)(1+x2)(1+x3)(1+x4)</code><br><code>=(1+x+x2+x3)(1+x3+x4+x7)</code><br><code>=1+x+x2+2x3+2x4+2x5+2x6+2x7+x8+x9+x10</code><br>于是我们知道称出5克砝码方案有2种，6克有2种，···</li><li>求使用1分，2分，3分的邮票贴出不同数值的方案数<br>由于允许重复，母函数为：<br>G(x)=(1+x+x2+···)(1+x2+x4+···)(1+x3+x6+···)</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">//普通型母函数</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int c1[1000], c2[1000];</span><br><span class="line">int val[1000],a[1000];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,i, j, k;</span><br><span class="line">    while(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">       //这一段根据题意处理，主要处理每种的数量和这一种的价值</span><br><span class="line">        memset(c1, 0, sizeof(c1));</span><br><span class="line">        memset(c2, 0, sizeof(c2));</span><br><span class="line">        for(i = 0; i &lt;=n; ++i)//初始化第一个多项式</span><br><span class="line">        &#123;</span><br><span class="line">            c1[i]=1;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i = 2; i &lt;=17; i++)//化简过程表示括号数量，从2开始，因为第一个括号不用操作</span><br><span class="line">        &#123;</span><br><span class="line">            for(j = 0; j &lt;=n; j++)//判断左边</span><br><span class="line">            &#123;</span><br><span class="line">                for(k = 0; j+ k&lt;=n; k+=val[i])//这个循环的限制条件根据题意而变，判断右边</span><br><span class="line">                &#123;</span><br><span class="line">                    c2[j + k] += c1[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for(j = 0; j &lt;=n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                c1[j] = c2[j];</span><br><span class="line">                c2[j] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,c1[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指数型母函数</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 100;</span><br><span class="line">double c1[N], c2[N],a[N];</span><br><span class="line">int val[N];</span><br><span class="line">void Factorial()</span><br><span class="line">&#123;</span><br><span class="line">    a[0]=1;</span><br><span class="line">    a[1]=1;</span><br><span class="line">    for(int i = 2; i &lt;=20; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a[i-1]*i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n, m, i, j, k;</span><br><span class="line">    Factorial();</span><br><span class="line">    while(~scanf(&quot;%d%d&quot;, &amp;n, &amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        for(i = 0; i &lt; n; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        memset(c1, 0, sizeof(c1));</span><br><span class="line">        memset(c2, 0, sizeof(c2));</span><br><span class="line"></span><br><span class="line">        for(i = 0; i &lt;= val[0]; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            c1[i] = 1.0/a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for(i = 1; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(j = 0; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                for(k = 0; k + j &lt;= m &amp;&amp; k &lt;= val[i]; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    c2[j + k] += c1[j]/a[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for(j = 0; j &lt;= m; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                c1[j] = c2[j];</span><br><span class="line">                c2[j] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%.0lf\n&quot;, c1[m]*a[m]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/17/母函数/index.jpg&quot; alt=&quot;Uchiha Madara&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;母函数&quot;&gt;&lt;a href=&quot;#母函数&quot; class=&quot;headerlink&quot; title=&quot;母函数&quot;&gt;&lt;/a&gt;母函数&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="母函数" scheme="http://yoursite.com/tags/%E6%AF%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>素数筛法</title>
    <link href="http://yoursite.com/2018/03/17/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/17/素数筛法/</id>
    <published>2018-03-17T13:17:46.000Z</published>
    <updated>2018-03-17T13:33:31.670Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/17/素数筛法/index.jpg" alt="Uchiha Madara"></p><h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><blockquote><p>质数（prime number）又称素数，有无限个。<br>质数定义为在大于1的自然数中，除了1和它本身以外不再有其他因数。</p></blockquote><p>我们对于素数的判定的确经过了几个过程。<br>我们一个一个来讨论</p><h1 id="按照定义"><a href="#按照定义" class="headerlink" title="按照定义"></a>按照定义</h1><p>我们按照定义来实现找出素数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int flag=0;</span><br><span class="line">if(n&lt;2)flag=1;</span><br><span class="line">for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">  if(n%i==0)&#123;</span><br><span class="line">    flag=1;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag)cout&lt;&lt;&quot;不是素数&quot;&lt;&lt;endl;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;&quot;是素数&quot;&lt;&lt;endl;</span><br></pre></td></tr></table></figure></p><p>通过定义来实现素数的判定。<br>优点是比较好理解，<br>缺点是时间复杂度比较高</p><h1 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">memset(vis,0,sizeof(vis));</span><br><span class="line">for(int i=2;i&lt;=n;i++)</span><br><span class="line">for(int j=i*2;j&lt;=n;j+=i)</span><br><span class="line">vis[j]=1;</span><br><span class="line"></span><br><span class="line">//优化</span><br><span class="line">int m=sqrt(n+0.5);</span><br><span class="line">memset(vis,0,sizeof(vis));</span><br><span class="line">for(int i=2;i&lt;=m;i++)</span><br><span class="line">if(!vis[i])</span><br><span class="line">for(int j=i*i;j&lt;=n;j+=i)</span><br><span class="line">vis[j]=1;</span><br></pre></td></tr></table></figure><p>这是一种求素数比较方便并且快速的方法。<br>具体思想是<br>筛去2，3，5，7等等的倍数，那么剩余的便是合数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/17/素数筛法/index.jpg&quot; alt=&quot;Uchiha Madara&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;素数&quot;&gt;&lt;a href=&quot;#素数&quot; class=&quot;headerlink&quot; title=&quot;素数&quot;&gt;&lt;/a&gt;素数&lt;/h1&gt;&lt;blockq
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="素数" scheme="http://yoursite.com/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>大数运算</title>
    <link href="http://yoursite.com/2018/03/15/%E5%A4%A7%E6%95%B0%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2018/03/15/大数运算/</id>
    <published>2018-03-15T13:06:34.000Z</published>
    <updated>2018-03-16T15:51:03.109Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/15/大数运算/index.jpg" alt="Ōtsutsuki Naruto"><br>我们知道任何数值都有范围一说，c++肯定也一样<br><code>int</code>表示32为整数<br><code>longlong</code>表示64位整数<br>数值过大就会存在溢出的情况<br>怎么办？<br><strong>大数教你做人</strong></p><h1 id="大数加"><a href="#大数加" class="headerlink" title="大数加"></a>大数加</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string add(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    int len1=a.length();</span><br><span class="line">    int len2=b.length();</span><br><span class="line">    int len=max(len1,len2);</span><br><span class="line">    for(int i=len1;i&lt;len;i++)</span><br><span class="line">        a=&quot;0&quot;+a;</span><br><span class="line">    for(int i=len2;i&lt;len;i++)</span><br><span class="line">        b=&quot;0&quot;+b;</span><br><span class="line">    int ok=0;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        char temp=a[i]+b[i]-&apos;0&apos;+ok;</span><br><span class="line">        if(temp&gt;&apos;9&apos;)</span><br><span class="line">        &#123;</span><br><span class="line">            ok=1;</span><br><span class="line">            temp-=10;</span><br><span class="line">        &#125;</span><br><span class="line">        else ok=0;</span><br><span class="line">        c=temp+c;</span><br><span class="line">    &#125;</span><br><span class="line">    if(ok) c=&quot;1&quot;+c;</span><br><span class="line">    int pos=-1;</span><br><span class="line">    for(int i=0;i&lt;c.length();i++)&#123;</span><br><span class="line">    if(c[i]==&apos;0&apos;)pos=i;</span><br><span class="line">    else</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">//    cout&lt;&lt;pos&lt;&lt;endl;</span><br><span class="line">if(pos==c.length()-1)return &quot;0&quot;;</span><br><span class="line">    return c.substr(pos+1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大数加法只是实现了简单的加减运算，记录每一位相加的结果（总的结果对10取余）以及进位（总的结果除以10）</p><h1 id="大数减"><a href="#大数减" class="headerlink" title="大数减"></a>大数减</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">string sub(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    bool ok=0;</span><br><span class="line">    int len1=a.length();</span><br><span class="line">    int len2=b.length();</span><br><span class="line">    int len=max(len1,len2);</span><br><span class="line">    for(int i=len1;i&lt;len;i++)</span><br><span class="line">        a=&quot;0&quot;+a;</span><br><span class="line">    for(int i=len2;i&lt;len;i++)</span><br><span class="line">        b=&quot;0&quot;+b;</span><br><span class="line">    if(a&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        string temp=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">        ok=1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[i]&lt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i-1]-=1;</span><br><span class="line">            a[i]+=10;</span><br><span class="line">        &#125;</span><br><span class="line">        char temp=a[i]-b[i]+&apos;0&apos;;</span><br><span class="line">        c=temp+c;</span><br><span class="line">    &#125;</span><br><span class="line">    int pos=0;</span><br><span class="line">    while(c[pos]==&apos;0&apos; &amp;&amp; pos&lt;len) pos++;</span><br><span class="line">    if(pos==len) return &quot;0&quot;;</span><br><span class="line">    if(ok) return &quot;-&quot;+c.substr(pos);</span><br><span class="line">    return c.substr(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大数加法和大数减法类似，如果对应位相减是负数，那么被减数的对应位数字前高一位减1，对应位加10。这是被减数减去减数就是存在的。</p><h1 id="大数乘"><a href="#大数乘" class="headerlink" title="大数乘"></a>大数乘</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">string mul(string a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    char s;</span><br><span class="line">    int len=a.length();</span><br><span class="line">    int ok=0;</span><br><span class="line">    for(int i=len-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        int temp=(a[i]-&apos;0&apos;)*b+ok;</span><br><span class="line">        ok=temp/10;</span><br><span class="line">        s=temp%10+&apos;0&apos;;</span><br><span class="line">        c=s+c;</span><br><span class="line">    &#125;</span><br><span class="line">    while(ok)</span><br><span class="line">    &#123;</span><br><span class="line">        s=ok%10+&apos;0&apos;;</span><br><span class="line">        c=s+c;</span><br><span class="line">        ok/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们假设<code>a*b</code><br>类似于大数加法运算，a的每一位数字乘上b得到结果的当前位的初始值，当前位初始值对10取模得到结果的当前位。同时进位等于当前位初始值加上进位。<br>我们假设<code>12345*12</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  12</span><br><span class="line">* 12</span><br><span class="line">每一位的初始值等于</span><br><span class="line">12 24</span><br><span class="line">我们从右向左对十取模并且得到进位，将进位加到高一位的位置。</span><br><span class="line">那么有</span><br><span class="line">第一步：4（进位为2）</span><br><span class="line">第二步：12+2 4</span><br><span class="line">第三步：1 4 4</span><br><span class="line">结果就是144</span><br></pre></td></tr></table></figure></p><h1 id="大数除"><a href="#大数除" class="headerlink" title="大数除"></a>大数除</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">string div(string a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    string c;</span><br><span class="line">    int len=a.length();</span><br><span class="line">    int ans=0;</span><br><span class="line">    char s;</span><br><span class="line">    for(int i=0;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=ans*10+a[i]-&apos;0&apos;;</span><br><span class="line">        s=ans/b+&apos;0&apos;;</span><br><span class="line">        ans%=b;</span><br><span class="line">        c+=s;</span><br><span class="line">    &#125;</span><br><span class="line">    int pos=0;</span><br><span class="line">    while(pos&lt;len &amp;&amp; c[pos]==&apos;0&apos;) pos++;</span><br><span class="line">    if(pos==len) return &quot;0&quot;;</span><br><span class="line">    return c.substr(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是模拟数式运算的一种实现方法。<br>大家可以自己尝试一下。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>前导零</li><li>相加后的结果字长</li><li>字符串中存储的每一位的数字和我们已知的十进制表示法相反，也就是说高位在前，低位在后，而我们进行加减运算列等式的时候是低位对其进行计算，所以在计算前我们需要转换字符串的字符位置。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/15/大数运算/index.jpg&quot; alt=&quot;Ōtsutsuki Naruto&quot;&gt;&lt;br&gt;我们知道任何数值都有范围一说，c++肯定也一样&lt;br&gt;&lt;code&gt;int&lt;/code&gt;表示32为整数&lt;br&gt;&lt;code&gt;longlong&lt;/co
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="大数" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>背包</title>
    <link href="http://yoursite.com/2018/03/10/%E8%83%8C%E5%8C%85/"/>
    <id>http://yoursite.com/2018/03/10/背包/</id>
    <published>2018-03-10T11:49:51.000Z</published>
    <updated>2018-03-17T13:19:07.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h1><p><img src="/2018/03/10/背包/index.jpg" alt="Uchiha Madara"></p><h2 id="背包简介"><a href="#背包简介" class="headerlink" title="背包简介"></a>背包简介</h2><p>问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。<br>我们讨论三种背包方式。</p><ul><li>01背包</li><li>完全背包</li><li>多重背包<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2></li><li>01背包</li></ul><blockquote><p>有n个重量和价值分别为Wi，vi的物品，从这些物品中挑选出总重量不超过W的物品，求所有挑选方案中价值总和的最大值。</p></blockquote><p>我们设置状态转移方程<br>dp[i][j]表示前i个物品在总重量小于等于j的情况下挑选的价值总和最大值。<br>那么存在一个转移方程<br><code>dp[i][j]=max(dp[i-1][j],dp[i-1][j-wi]+vi)</code><br>如何理解呢？<br>我们通过前i-1个物品推导出前i个物品的转移方程，<br>如果我们取第i个物品，<br><code>dp[i][j]=dp[i-1][j-wi]+vi</code><br>如果我们不取第i个物品，<br><code>dp[i][j]=dp[i-1][j]</code><br>我们可以通过逆序来压缩掉一维空间<br><code>dp[j]=max(dp[j],dp[j-wi]+vi)</code><br>因为dp[j-wi]+vi此时保存的是dp[i-1][j-wi]+vi</p><ul><li>完全背包</li></ul><blockquote><p>有n种重量和价值分别为wi，vi的物品。从这些物品中挑选总质量不超过W的物品，求出挑选物品质量价值总和的最大值。在这里，每种物品可以挑选任意多件。</p></blockquote><p>其实01背包针对的问题是咱们每个物品只能挑选一次，而完全背包则是每个物品我们可以挑选任意多次。<br>那么我们的状态状态转移方程可以写成：<br><code>dp[i][j]=max(dp[i-1][j-k*wi]+k*vi)k大于等于0，且k*wi小于j</code><br>我们可以将其优化为：<br><code>dp[i][j]=max(dp[i][j],dp[i-1][j-wi]+vi)</code><br>此时我们也可以降掉一维空间。<br>使其满足<br>``dp[j]=max(dp[j],dp[j-wi]+vi)</p><ul><li>多重背包</li></ul><blockquote><p>有n种重量和价值分别为wi，vi的物品。从这些物品中挑选总质量不超过W的物品，求出挑选物品质量价值总和的最大值。在这里，每种物品最多可以挑选ni件。</p></blockquote><p>其实这也是01背包的变形。<br><code>dp[i][j]=max(dp[i-1][j-k*wi]+k*vi)0&lt;=k&lt;=ni，且k*wi小于j</code><br>同时我们也可以通过二进制压缩来减小k的值。<br>如果我们不进行压缩，我们需要遍历ni次<br>如果我们进行压缩，那么我们需要遍历<code>log(ni)</code>次。<br>二进制压缩的思想是将k分成2，4，8，16等等部分。<br>假设k=10；<br>我们分为2，4，4一共三份，(最后一份是10-2-4)<br>那么此时<br>2-》<code>wi</code>等同于<code>2*wi</code>，<code>vi</code>等同于<code>2*vi</code><br>4-》<code>wi</code>等同于<code>4*wi</code>，<code>vi</code>等同于<code>4*vi</code><br>4-》<code>wi</code>等同于<code>4*wi</code>，<code>vi</code>等同于<code>4*vi</code><br>每一个部分记录它的质量和体积，等同于多加了三个01背包的部分。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">c[i]表示体积</span><br><span class="line">w[i]表示重量</span><br><span class="line">//01背包</span><br><span class="line">for(int i=0;i&lt;N:i++)&#123;</span><br><span class="line">    for(int j=V;j&gt;=c[i];j--)</span><br><span class="line">        f[j]=max(f[j],f[j-c[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">//完全背包</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">    for(int j=c[i];j&lt;=V;j++)</span><br><span class="line">        f[j]=max(f[j],f[j-c[i]]+w[i]);</span><br><span class="line">&#125;</span><br><span class="line">//多重背包</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">    for(int k=1;k&lt;n[i];n[i]-=k,k&lt;&lt;=1)</span><br><span class="line">        for(int j=V;j&gt;=k*c[i];j--)</span><br><span class="line">            f[j]=max(f[j],f[j-k*c[i]]+k*w[i]);</span><br><span class="line">    for(int j=V;j&gt;=n[i]*c[i];j--)</span><br><span class="line">        f[j]=max(f[j],f[j-n[i]*c[i]]+n[i]*w[i]);</span><br><span class="line">&#125;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int MAXN = 101;</span><br><span class="line">const int SIZE = 50001;</span><br><span class="line"></span><br><span class="line">int dp[SIZE];</span><br><span class="line">int volume[MAXN], value[MAXN], c[MAXN];</span><br><span class="line">int n, v;           //  总物品数，背包容量</span><br><span class="line"></span><br><span class="line">//  01背包</span><br><span class="line">void ZeroOnepark(int val, int vol)</span><br><span class="line">&#123;</span><br><span class="line">    for (int j = v ; j &gt;= vol; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  完全背包</span><br><span class="line">void Completepark(int val, int vol)</span><br><span class="line">&#123;</span><br><span class="line">    for (int j = vol; j &lt;= v; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  多重背包</span><br><span class="line">void Multiplepark(int val, int vol, int amount)</span><br><span class="line">&#123;</span><br><span class="line">    if (vol * amount &gt;= v)</span><br><span class="line">    &#123;</span><br><span class="line">        Completepark(val, vol);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        int k = 1;</span><br><span class="line">        while (k &lt; amount)</span><br><span class="line">        &#123;</span><br><span class="line">            ZeroOnepark(k * val, k * vol);</span><br><span class="line">            amount -= k;</span><br><span class="line">            k &lt;&lt;= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (amount &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            ZeroOnepark(amount * val, amount * vol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (cin &gt;&gt; n &gt;&gt; v)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 1 ; i &lt;= n ; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; volume[i] &gt;&gt; value[i] &gt;&gt; c[i];      //   费用，价值，数量</span><br><span class="line">        &#125;</span><br><span class="line">        memset(dp, 0, sizeof(dp));</span><br><span class="line">        for (int i = 1; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Multiplepark(value[i], volume[i], c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[v] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背包&quot;&gt;&lt;a href=&quot;#背包&quot; class=&quot;headerlink&quot; title=&quot;背包&quot;&gt;&lt;/a&gt;背包&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/03/10/背包/index.jpg&quot; alt=&quot;Uchiha Madara&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;背
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>考研规划</title>
    <link href="http://yoursite.com/2018/03/08/%E8%80%83%E7%A0%94%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2018/03/08/考研规划/</id>
    <published>2018-03-08T11:30:23.000Z</published>
    <updated>2018-03-08T15:27:11.491Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/08/考研规划/index.gif" alt="Uzumaki Naruto "></p><h1 id="高数："><a href="#高数：" class="headerlink" title="高数："></a>高数：</h1><table><thead><tr><th>阶段</th><th style="text-align:center">复习教材以及习题</th><th style="text-align:right">时间</th></tr></thead><tbody><tr><td>基础巩固</td><td style="text-align:center">数学教材（高数概率论线代）+张宇36讲</td><td style="text-align:right">3-&gt;6月</td></tr></tbody></table><ul><li>基础巩固<br>数学根据去年（2018年）大纲来复习书上的内容<br>张宇36讲配套教材来吃透教材，形成知识链<br>不要<strong><em>急</em></strong>，时间来得及</li></ul><h1 id="英语："><a href="#英语：" class="headerlink" title="英语："></a>英语：</h1><table><thead><tr><th>阶段</th><th style="text-align:center">复习教材以及习题</th><th style="text-align:right">时间</th></tr></thead><tbody><tr><td>基础巩固</td><td style="text-align:center">单词+阅读+语法</td><td style="text-align:right">3-&gt;6月</td></tr></tbody></table><ul><li>基础巩固<br>单词：恋练有词，希望可以过多边单词书<br>阅读：我还是使用扇贝阅读，阅读需要配套翻译<br>语法：刘晓艳长难句<br>不要急，基础是重点，高楼平地起，没有基础，便没有提高</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/08/考研规划/index.gif&quot; alt=&quot;Uzumaki Naruto &quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;高数：&quot;&gt;&lt;a href=&quot;#高数：&quot; class=&quot;headerlink&quot; title=&quot;高数：&quot;&gt;&lt;/a&gt;高数：&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Lifes" scheme="http://yoursite.com/categories/Lifes/"/>
    
    
      <category term="考研" scheme="http://yoursite.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>拓扑排序</title>
    <link href="http://yoursite.com/2018/03/08/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/03/08/拓扑排序/</id>
    <published>2018-03-07T16:04:36.000Z</published>
    <updated>2018-03-09T12:58:16.717Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/08/拓扑排序/index.jpg" alt="Uchiha Itachi"></p><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><blockquote><p>在计算机科学领域，有向图的拓扑排序或拓扑排序是其顶点的线性排序，使得对于从顶点u到顶点v的每个有向边  uv,u 在排序中都在v之前。 例如，图形的顶点可以表示要执行的任务，并且边缘可以表示一个任务必须在另一个任务之前执行的约束; 在这个应用中，拓扑排序只是一个有效的任务顺序。 如果且仅当图形没有定向循环，即如果它是有向无环图（DAG），则拓扑排序是可能的。 任何 DAG 具有至少一个拓扑排序，并且已知这些算法用于在线性时间内构建任何 DAG 的拓扑排序。</p><p>在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序（英语：Topological sorting）。<br>每个顶点出现且只出现一次；</p><p>若A在序列中排在B的前面，则在图中不存在从B到A的路径。<br>也可以定义为：拓扑排序是对有向无环图的顶点的一种排序，它使得如果存在一条从顶点A到顶点B的路径，那么在排序中B出现在A的后面。(转自<a href="https://zh.wikipedia.org/wiki/%E6%8B%93%E6%92%B2%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">维基百科</a>)</p></blockquote><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>我们一般存在两种算法实现方法</p><ul><li>dfs</li></ul><p>其实DFS就是深度优先搜索，它每次都沿着一条路径一直往下搜索，知道某个顶点没有了出度时，就停止递归，往回走，所以我们就用DFS的这个思路，我们可以得到一个有向无环图的拓扑序列，其实DFS很像Kahn算法的逆过程。</p><ul><li>根据出入度（称之为Kahn算法）</li></ul><p>在有向图中选一个没有前驱的顶点并且输出<br>从图中删除该顶点和所有以它为尾的弧（白话就是：删除所有和它有关的边）<br>重复上述两步，直至所有顶点输出，或者当前图中不存在无前驱的顶点为止，后者代表我们的有向图是有环的，因此，也可以通过拓扑排序来判断一个图是否有环。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//使用dfs</span><br><span class="line">int n, G[maxn][maxn], c[maxn], topo[maxn], t;</span><br><span class="line">/*</span><br><span class="line"> *n表示邻接表的个数，</span><br><span class="line"> *c[]表示状态，为1表示访问过，为0表示未访问，为-1表示正在访问</span><br><span class="line"> *topo表示排完序的拓扑序列</span><br><span class="line"> */</span><br><span class="line">bool dfs(int u)&#123;</span><br><span class="line">c[u] = -1;</span><br><span class="line">for(int v = 0; v &lt; n; v++) if(G[u][v]) &#123;</span><br><span class="line">if(c[v]&lt;0)</span><br><span class="line">return false;</span><br><span class="line">//表示v也在被访问，说明u和v在一个环中，说明输入数据有问题，非DAG</span><br><span class="line">else if(!c[v]&amp;&amp;!dfs(v))</span><br><span class="line">return false;</span><br><span class="line">//说明v没有被访问，但是以v为起始节点的时候，v存在环。</span><br><span class="line">&#125;</span><br><span class="line">c[u] = 1; topo[--t]=u;</span><br><span class="line">//深搜到最后一个u的时候，topo[n-1]赋值为u</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool toposort()&#123;</span><br><span class="line">t = n;</span><br><span class="line">memset(c, 0, sizeof(c));</span><br><span class="line">for(int u = 0; u &lt; n; u++) if(!c[u])</span><br><span class="line">if(!dfs(u)) return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//////////////////////////////////////</span><br><span class="line">//使用出度入度的思想</span><br><span class="line">int G[MAXN][MAXN];//路径</span><br><span class="line">int in_degree[MAXN];//入度</span><br><span class="line">int ans[MAXN];//路径</span><br><span class="line">int n;//顶点</span><br><span class="line">void toposort()</span><br><span class="line">&#123;</span><br><span class="line">for(i = 1; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j = 1; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">if(G[i][j])</span><br><span class="line">&#123;</span><br><span class="line">in_degree[j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(i = 1; i &lt;= n; i++)//从最小的开始寻找，</span><br><span class="line">&#123;//这样保证了有多个答案时序号小的先输出</span><br><span class="line">int k = 1;</span><br><span class="line">while(in_degree[k] != 0)//寻找入度为零的点</span><br><span class="line">k++;</span><br><span class="line">ans[i] = k;</span><br><span class="line">in_degree[k] = -1;</span><br><span class="line">//更新为-1，后边检测不受影响，相当于删除节点</span><br><span class="line">for(int j = 1; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">if(G[k][j])</span><br><span class="line">in_degree[j]--;//相关联的入度减1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/08/拓扑排序/index.jpg&quot; alt=&quot;Uchiha Itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;拓扑排序&quot;&gt;&lt;a href=&quot;#拓扑排序&quot; class=&quot;headerlink&quot; title=&quot;拓扑排序&quot;&gt;&lt;/a&gt;拓扑排序&lt;/h1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最小生成树</title>
    <link href="http://yoursite.com/2018/03/08/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://yoursite.com/2018/03/08/最小生成树/</id>
    <published>2018-03-07T16:03:34.000Z</published>
    <updated>2018-03-08T15:28:40.338Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/08/最小生成树/index.jpg" alt="Uchiha Itachi"></p><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><h2 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h2><p>一个有 n 个结点的连通图的生成树是原图的极小连通子图，且包含原图中的所有 n 个结点，并且有保持图连通的最少的边。 最小生成树可以用kruskal（克鲁斯卡尔）算法或prim（普里姆）算法求出。简言之就是在一个连通图中找出一些边使得所有节点联通。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>虽然有很多可以实现最小生成树的算法，我们只讨论Kruskal算法。</p><h3 id="Kruskal（克鲁斯科尔算法）"><a href="#Kruskal（克鲁斯科尔算法）" class="headerlink" title="Kruskal（克鲁斯科尔算法）"></a>Kruskal（克鲁斯科尔算法）</h3><p>该算法算是贪心算法的引用</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ul><li>新建图G，G中拥有原图中相同的节点，但没有边</li><li>将原图中所有的边按权值从小到大排序</li><li>从权值最小的边开始，如果这条边连接的两个节点于图G中不在同一个连通分量中，则添加这条边到图G中</li><li>重复3，直至图G中所有的节点都在同一个连通分量中<h2 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a>代码描述</h2>我们间接通过并查集来实现判断是否两个节点存在于同一个连通分量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">int f[maxn];</span><br><span class="line">int find(int u)&#123;</span><br><span class="line">    if(u==f[u])return u;</span><br><span class="line">    f[u]=find(f[u]);</span><br><span class="line">    return f[u];</span><br><span class="line">&#125;</span><br><span class="line">void join(int u,int v)&#123;</span><br><span class="line">    int fu=find(u);</span><br><span class="line">    int fv=find(v);</span><br><span class="line">    if(fu!=fv)&#123;</span><br><span class="line">        f[fu]=fv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">struct edge&#123;</span><br><span class="line">    int from,to,cost;</span><br><span class="line">    friend bool operator &lt;(edge a,edge b)&#123;</span><br><span class="line">        return a.cost&lt;b.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Ed[maxn];</span><br><span class="line">int V,E;</span><br><span class="line">int kruskal()&#123;</span><br><span class="line">    sort(Ed,Ed+E);</span><br><span class="line">    iniuni(V);</span><br><span class="line">    int res=0;</span><br><span class="line">    for(int i=0;i&lt;E;i++)&#123;</span><br><span class="line">        edge e=Ed[i];</span><br><span class="line">        int fu=find(Ed[i].from);</span><br><span class="line">        int fv=find(Ed[i].to);</span><br><span class="line">        if(fu!=fv)&#123;</span><br><span class="line">            join(e.from,e.to);</span><br><span class="line">            res+=e.cost;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/08/最小生成树/index.jpg&quot; alt=&quot;Uchiha Itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;最小生成树&quot;&gt;&lt;a href=&quot;#最小生成树&quot; class=&quot;headerlink&quot; title=&quot;最小生成树&quot;&gt;&lt;/a&gt;最小生成
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="最小生成树" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://yoursite.com/2018/03/07/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://yoursite.com/2018/03/07/并查集/</id>
    <published>2018-03-07T00:06:19.000Z</published>
    <updated>2018-03-07T00:32:19.880Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/07/并查集/index.jpg" alt="Uchiha Itachi"></p><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h2><p>在计算机科学中，并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个用于此数据结构的操作：</p><ul><li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li><li>Union：将两个子集合并成同一个集合。</li></ul><p>由于支持这两种操作，一个不相交集也常被称为联合-查找数据结构（union-find data structure）或合并-查找集合（merge-find set）。其他的重要方法，MakeSet，用于建立单元素集合。有了这些方法，许多经典的划分问题可以被解决。</p><p>为了更加精确的定义这些方法，需要定义如何表示集合。一种常用的策略是为每个集合选定一个固定的元素，称为代表，以表示整个集合。接着，Find(x) 返回 x 所属集合的代表，而 Union 使用两个集合的代表作为参数。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>用集合中的某个元素来代表这个集合，该元素称为集合的代表元。<br>一个集合内的所有元素组织成以代表元为根的树形结构。<br>在并查集算法中，合并操作是将该元素所在树连接在被合并元素所在树上。<br>对于查找操作，即是路经查找到树根，确定代表元的过程。</p><blockquote><p>判断两个元素是否属于同一集合，只需要看他们的代表元是否相同即可。</p></blockquote><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>存在两种优化算法：</p><ul><li>按秩合并：使包含较少结点的树根指向包含较多结点的树根。</li><li>路径压缩：使路径查找上的每个点都直接指向根结点。<h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3>是一种在执行“查找”时扁平化树结构的方法。关键在于在路径上的每个节点都可以直接连接到根上；他们都有同样的表示方法。为了达到这样的效果，Find递归地经过树，改变每一个节点的引用到根节点。得到的树将更加扁平，为以后直接或者间接引用节点的操作加速。<br>关键代码在find<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int find(int u)&#123;</span><br><span class="line">    if(u==f[u])return u;</span><br><span class="line">    f[u]=find(f[u]);</span><br><span class="line">    return f[u];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="完整代码描述"><a href="#完整代码描述" class="headerlink" title="完整代码描述"></a>完整代码描述</h2><ul><li>递归版本(存在溢出的情况)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int f[maxn];</span><br><span class="line">int find(int u)&#123;</span><br><span class="line">    if(u==f[u])return u;</span><br><span class="line">    f[u]=find(f[u]);</span><br><span class="line">    return f[u];</span><br><span class="line">&#125;</span><br><span class="line">void join(int u,int v)&#123;</span><br><span class="line">    int fu=find(u);</span><br><span class="line">    int fv=find(v);</span><br><span class="line">    if(fu!=fv)&#123;</span><br><span class="line">        f[fu]=fv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非递归版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int pre[1000 ];</span><br><span class="line">void ini()//初始化，表示每个结点的父节点是其本身</span><br><span class="line">&#123;</span><br><span class="line">for(int i=0;i&lt;maxn;i++)</span><br><span class="line">pre[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)//查找根节点</span><br><span class="line">&#123;</span><br><span class="line">    int r=x;</span><br><span class="line">    while ( pre[r] != r )//返回根节点 r</span><br><span class="line">          r=pre[r];</span><br><span class="line"></span><br><span class="line">    int i=x,j;</span><br><span class="line">    while(i!=r) //路径压缩</span><br><span class="line">    &#123;</span><br><span class="line">         j = pre[i]; //在改变上级之前用临时变量  j 记录下他的值</span><br><span class="line">         pre[i]= r ; //把上级改为根节点</span><br><span class="line">         i=j;</span><br><span class="line">    &#125;</span><br><span class="line">    return r ;</span><br><span class="line">&#125;</span><br><span class="line">void join(int x,int y)//判断x y是否连通，</span><br><span class="line">//如果已经连通，就不用管了 如果不连通，就把它们所在的连通分支合并起,</span><br><span class="line">&#123;</span><br><span class="line">    int fx=find(x),fy=find(y);</span><br><span class="line">    if(fx!=fy)</span><br><span class="line">        pre[fx]=fy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/07/并查集/index.jpg&quot; alt=&quot;Uchiha Itachi&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
</feed>
