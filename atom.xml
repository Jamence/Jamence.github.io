<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jamence&#39;s blog</title>
  
  <subtitle>everything is funny when you are exploring</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-25T08:36:39.299Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jamence</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++继承之多重继承和多继承</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E4%B9%8B%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2018/02/25/c-继承之多重继承和多继承/</id>
    <published>2018-02-25T08:18:04.000Z</published>
    <updated>2018-02-25T08:36:39.299Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承之多重继承和多继承/index.jpg" alt="Pain the cartoon"></p><h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多重继承是一个类的父类也有父类。<br>多重继承的对象初始化方式最高的父类到子类。<br>A()–&gt;B–&gt;C()<br>销毁时正好是初始化的反顺序。<br>~C–&gt;~B–&gt;A()<br>代码示例为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;&#125;;</span><br><span class="line">class B:public A&#123;&#125;;</span><br><span class="line">class C:public B&#123;&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ul><li>多重继承与多继承不同，当B类从A类派生，C类从B类派生，此时称为多重继承</li><li>当实例化子类时，会首先依次调用所有基类的构造函数，最后调用该子类的构造函数；销毁该子类时，则相反，先调用该子类的析构函数，再依次调用所有基类的析构函数。</li><li>无论继承的层级有多少层，只要它们保持着直接或间接的继承关系，那么子类都可以与其直接父类或间接父类构成 is a的关系，并且能够通过父类的指针对直接子类或间接子类进行相应的操作，子类对象可以给直接父类或间接父类的对象或引用赋值或初始化。</li></ul><hr><h1 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>多继承是一个类有2个以上父类。<br>多继承的对象初始化方式是父类依次初始化。<br>A()–&gt;B–&gt;AB()<br>销毁时正好是初始化的反顺序。<br>~AB–&gt;~B()–&gt;A~()</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;&#125;;</span><br><span class="line">class B&#123;&#125;;</span><br><span class="line">class AB:public A,public B&#123;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承之多重继承和多继承/index.jpg&quot; alt=&quot;Pain the cartoon&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;多重继承&quot;&gt;&lt;a href=&quot;#多重继承&quot; class=&quot;headerlink&quot; title=&quot;多重继承&quot;&gt;
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承之is_a和has_a</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E4%B9%8Bis-a%E5%92%8Chasas-a/"/>
    <id>http://yoursite.com/2018/02/25/c-继承之is-a和hasas-a/</id>
    <published>2018-02-25T08:17:34.000Z</published>
    <updated>2018-02-25T08:36:53.319Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承之is-a和hasas-a/index.jpg" alt="Pain the six"></p><h1 id="is-a原则"><a href="#is-a原则" class="headerlink" title="is_a原则"></a>is_a原则</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>举一个例子，有一个Horse类可以保存关于马的所有信息，身高体重等等，那么我们就可以从Horse类中派生出白马类，白马类包含所有Horse类的成员，在白马类中可以新增关于白马的成员，这个成员通常不用于Horse类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Horse</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int Tall;</span><br><span class="line">    int Weight;</span><br><span class="line">&#125;;</span><br><span class="line">class WhiteHorse:public Horse</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int Color;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面的代码中，WhiteHorse多了颜色这个成员。<br>整体来看，is-a表示了一种是的关系。比如白马是马，香蕉是水果，老师是人这种关系。<br>并且<strong>public</strong>的继承方式建立了<code>is_a</code>的关系。</p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>派生类Soldier继承自基类Person<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//Person.h</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Person(string name = &quot;Jim&quot;);</span><br><span class="line">    ~Person();</span><br><span class="line"></span><br><span class="line">    void play();</span><br><span class="line">protected:</span><br><span class="line">    string m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//Soldier.h</span><br><span class="line">class Soldier : public Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Soldier(string name = &quot;James&quot;, int age = 20);</span><br><span class="line"></span><br><span class="line">    ~Soldier();</span><br><span class="line"></span><br><span class="line">    void work();</span><br><span class="line">protected:</span><br><span class="line">    int m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li>派生类可以给基类赋值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//main.cpp</span><br><span class="line">int main()&#123;</span><br><span class="line">    Soldier s1;</span><br><span class="line">    Person p1 = s1;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>因为一个士兵也是一个人。</p><ul><li>基类指针可以指向派生类(派生类可以取地址给基类)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//main.cpp</span><br><span class="line">int main()&#123;</span><br><span class="line">    Soldier s1;</span><br><span class="line">    Person *p2 = &amp;s1;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>同理，一个士兵也是一个人，父类的指针也可以指向子类对象。</p><ul><li><p>把基类的指针或者是基类的对象或者是基类的引用作为函数的参数来使它可以接收所传入的子类的对象，并且也可以传入基类的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void func1(Person *p)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func2(Person &amp;p)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//main.cpp</span><br><span class="line">int main()&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    Soldier s1;</span><br><span class="line">    func1(&amp;p1);     func2(p1);</span><br><span class="line">    func1(&amp;s1);     func2(s1);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基类只能接收和访问派生类中自己有的数据成员和成员函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//#include &quot;Person.h&quot;</span><br><span class="line"># include &quot;Soldier.h&quot;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Soldier soldier;</span><br><span class="line">    Person person;</span><br><span class="line">    person = soldier;</span><br><span class="line">    person.play();</span><br><span class="line"></span><br><span class="line">    Person *p = &amp;soldier;</span><br><span class="line">    p-&gt;play();  // 使用基类声明的对象只能调用基类的方法</span><br><span class="line">    //p-&gt;work();    // 使用基类声明的对象不能调用派生类的方法</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要调用子类的成员函数，那么就是多态的内容了，后面再说。<br>这是在编译期就决定了的。</p></li><li>通过基类的指针指向派生类的对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//#include &quot;Person.h&quot;</span><br><span class="line">#include &quot;Soldier.h&quot;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Person *pp = new Soldier;   // 基类的指针去指向派生类的内存空间</span><br><span class="line">    pp-&gt;play();</span><br><span class="line">    delete pp;  // 销毁基类的对象，执行的是基类的析构函数，派生类的内存并没有释放</span><br><span class="line">    pp = NULL;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">LOG:</span><br><span class="line">Person::play()</span><br><span class="line">James</span><br><span class="line">Person::~Person()</span><br></pre></td></tr></table></figure></li></ul><h1 id="has-a原则"><a href="#has-a原则" class="headerlink" title="has_a原则"></a>has_a原则</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;has-a体现了有这个思想。<br>&emsp;&emsp;比如，午餐有香蕉。但是午餐不是香蕉。<br>&emsp;&emsp;其实私有跟保护继承体现了has-a原则是因为，私有跟保护继承是实现继承。<br>&emsp;&emsp;什么是实现继承呢？<br>&emsp;&emsp;实现继承的主要目标是代码重用，我们发现类B和类C存在同样的代码，因此我们设计了一个类 A，用于存放通用的代码，基于这种思路的继承称为实现继承。<br>&emsp;&emsp;我们可以说，午餐中存在香蕉。<br>&emsp;&emsp;而共有继承则不是，为什么？</p><blockquote><p>在需要基类对象的任何地方都可以使用公有派生类的对象来替代。通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员，而且所有成员的访问控制属性也和基类完全相同。这样，公有派生类实际就具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决。<br>那么就可得到，当为私有或保护继承的时候，是包含的关系，基类在派生类中是私有的。需要基类的时候是不能用派生类代替的。</p></blockquote><h2 id="两种情况"><a href="#两种情况" class="headerlink" title="两种情况"></a>两种情况</h2><ul><li><strong>包含</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Banana&#123;..&#125;;</span><br><span class="line"></span><br><span class="line">class Lauch</span><br><span class="line">&#123;</span><br><span class="line"> private:</span><br><span class="line">  class Banana;</span><br><span class="line"> ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>私有继承</strong><br>c++还有另一种实现has-a关系的途径—-私有继承。</li></ul><p>　　使用私有继承，基类的公有成员和保护成员都将成为派生类的私有成员。这意味着基类方法将不会成为派生对象公有接口的一部分，但可以在派生类的成员函数中使用它们。</p><p>　　使用公有继承，基类的公有方法将成为派生类的公有方法。简而言之，派生类将继承基类的接口，这是is-a关系的一部分。使用私有继承，基类的公有方法将成为派生类的私有方法。简而言之，派生类不能继承基类的接口。正如从被包含对象中看到的，这种不完全继承是has-a关系的一部分。</p><p>　　因此私有继承提供的特性与包含相同：获得实现，但不获得接口。所以，私有继承也可以用来实现has-a关系。</p><ul><li><em>使用包含还是私有继承</em></li></ul><p> &emsp;&emsp;大多数c++程序员倾向于前者。不过私有继承所提供的特性确实比包含多。例如，假设类包含保护成员，则这样的成员在派生类中是可用的，但在继承层次机构外是不可用的。如果使用组合奖这样的类保护在另一类中，则后者将不是排成类，而是位于继承层次结构之外，因此不能访问保护成员。但通过继承的到的将是派生类，因此他能够访问保护成员。</p><p>　　另一种需要使用私有继承的情况是需要重新定义虚函数。派生类可以重新定义虚函数，但包含类不能。使用私有继承，重新定义的函数将只能在类中使用，而不是公有的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承之is-a和hasas-a/index.jpg&quot; alt=&quot;Pain the six&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;is-a原则&quot;&gt;&lt;a href=&quot;#is-a原则&quot; class=&quot;headerlink&quot; title=&quot;is
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承之隐藏</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E4%B9%8B%E9%9A%90%E8%97%8F/"/>
    <id>http://yoursite.com/2018/02/25/c-继承之隐藏/</id>
    <published>2018-02-25T08:16:53.000Z</published>
    <updated>2018-02-25T08:36:50.804Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承之隐藏/index.jpg" alt="Yahiko"></p><h1 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>隐藏是指派生类的函数屏蔽了与其同名的基类函数。</p><h2 id="代码实例："><a href="#代码实例：" class="headerlink" title="代码实例："></a>代码实例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Person()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Person的构造函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    ~Person()&#123;</span><br><span class="line">cout&lt;&lt;&quot;Person的析构函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    void eat()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Person的eat函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">    int m_iAge;</span><br><span class="line">    string m_strName;</span><br><span class="line">&#125;;</span><br><span class="line">class Worker :public Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Worker()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的构造函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    ~Worker()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的析构函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    void eat()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的eat函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    void work()&#123;</span><br><span class="line">    cout&lt;&lt;&quot;Worker的work函数&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">    int m_iSalary;</span><br><span class="line">&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Worker w;</span><br><span class="line">w.eat();</span><br><span class="line">w.Person::eat();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person的构造函数</span><br><span class="line">Worker的构造函数</span><br><span class="line">Worker的eat函数</span><br><span class="line">Person的eat函数</span><br><span class="line">Worker的析构函数</span><br><span class="line">Person的析构函数</span><br><span class="line"></span><br><span class="line">--------------------------------</span><br><span class="line">Process exited after 0.1206 seconds with return value 0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure></p><h2 id="简易解释"><a href="#简易解释" class="headerlink" title="简易解释"></a>简易解释</h2><ul><li>Worker是子类，Person是父类，我们在栈上实例化子类方法，首先调用父类构造函数，其次调用子类构造函数。析构函数则反之，并且栈上的空间是由系统管理，系统调用析构函数。</li><li>父类中的eat()函数被隐藏，w.eat()调用的是子类的eat()函数。</li><li>如果我们需要调用父类的成员函数，可以采用<code>w.Person::eat();</code>的方法。</li></ul><h2 id="几个易混淆的名词"><a href="#几个易混淆的名词" class="headerlink" title="几个易混淆的名词"></a>几个易混淆的名词</h2><ul><li>隐藏：<br>不解释了</li><li>覆盖或者称之为重写（override）<br>如果我们没有在子类中定义同名的虚函数，那么在子类虚函数表当中就会写上父类当中那个虚函数的函数入口地址，如果我们在子类中也定义了同名的虚函数，那么在子类的虚函数表当中，我们就会把原来父类的虚函数的函数地址覆盖一下，覆盖成子类的虚函数的函数地址。</li><li><strong>如何记忆</strong><br>隐藏并没有消失，可以通过特殊的手段访问，数据成员也有隐藏这种现象。而覆盖则是在子类的虚函数表当中，我们就会把原来父类的虚函数的函数地址覆盖一下，覆盖成子类的虚函数的函数地址。（后续会有博客详细解释）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承之隐藏/index.jpg&quot; alt=&quot;Yahiko&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;隐藏&quot;&gt;&lt;a href=&quot;#隐藏&quot; class=&quot;headerlink&quot; title=&quot;隐藏&quot;&gt;&lt;/a&gt;隐藏&lt;/h1&gt;&lt;h2 id=&quot;概念：
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>c++继承方式</title>
    <link href="http://yoursite.com/2018/02/25/c-%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/02/25/c-继承方式/</id>
    <published>2018-02-25T07:36:58.000Z</published>
    <updated>2018-02-25T08:36:45.566Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/25/c-继承方式/index.jpg" alt="Uchiha Sasuke"></p><h1 id="c-继承（三种继承方式）"><a href="#c-继承（三种继承方式）" class="headerlink" title="c++继承（三种继承方式）"></a>c++继承（三种继承方式）</h1><h2 id="三种继承方式"><a href="#三种继承方式" class="headerlink" title="三种继承方式"></a>三种继承方式</h2><ul><li>共有继承<br>公有继承的特点是基类的公有成员和保护成员作为派生类的成员时，它们都保持原有的状态，而基类的私有成员仍然是私有的，不能被这个派生类的子类所访问。</li><li>私有继承<br>私有继承的特点是基类的公有成员和保护成员都作为派生类的私有成员，并且不能被这个派生类的子类所访问。</li><li>保护继承<br>保护继承的特点是基类的所有公有成员和保护成员都成为派生类的保护成员，并且只能被它的派生类成员函数或友元访问，基类的私有成员仍然是私有的。<h2 id="继承方式之间的关系"><a href="#继承方式之间的关系" class="headerlink" title="继承方式之间的关系"></a>继承方式之间的关系</h2></li></ul><table><thead><tr><th>继承方式</th><th style="text-align:center">基类的public成员</th><th>基类的protected成员</th><th style="text-align:right">基类的private成员</th></tr></thead><tbody><tr><td>public</td><td style="text-align:center">成为public成员</td><td>成为protected成员</td><td style="text-align:right">不可见</td></tr><tr><td>protected</td><td style="text-align:center">成为protected成员</td><td>成为protected成员</td><td style="text-align:right">不可见</td></tr><tr><td>private</td><td style="text-align:center">成为private成员</td><td>成为private成员</td><td style="text-align:right">不可见</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不管是哪种继承方式， 在派生类内部都可以访问基类的公有成员和保护成员 ， 基类的私有成员存在但是在子类中不可见（ 不能访问） 。</li><li>使用关键字class时默认的继承方式是private， 使用struct时默认的继承方式是public， 不过最好显式的写出继承方式。</li><li>在实际运用中一般使用都是public继承， 极少场景下才会使用protetced/private继承。</li><li>在struct继承中，如果没有显式给出继承类型，则默认的为public继承；在class继承中，如果没有显式给出继承类型，则默认的为private继承；<h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><h3 id="三种类成员访问限定符"><a href="#三种类成员访问限定符" class="headerlink" title="三种类成员访问限定符"></a>三种类成员访问限定符</h3></li><li><em>public</em>（共有）</li><li><em>protected</em>（保护）</li><li><em>private</em>（私有）<h3 id="三种继承关系"><a href="#三种继承关系" class="headerlink" title="三种继承关系"></a>三种继承关系</h3></li><li><em>public</em>（共有继承）</li><li><em>protected</em>（保护继承）</li><li><em>private</em>(私有继承)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/25/c-继承方式/index.jpg&quot; alt=&quot;Uchiha Sasuke&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;c-继承（三种继承方式）&quot;&gt;&lt;a href=&quot;#c-继承（三种继承方式）&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="c++" scheme="http://yoursite.com/categories/Languages/c/"/>
    
    
      <category term="c++继承" scheme="http://yoursite.com/tags/c-%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/08/hello-world/"/>
    <id>http://yoursite.com/2018/02/08/hello-world/</id>
    <published>2018-02-08T08:49:36.568Z</published>
    <updated>2018-02-25T08:09:44.759Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/02/08/hello-world/index.jpg" alt="一切的开始"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Clean-cache"><a href="#Clean-cache" class="headerlink" title="Clean cache"></a>Clean cache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Compress-code-using-gulp"><a href="#Compress-code-using-gulp" class="headerlink" title="Compress code using gulp"></a>Compress code using gulp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp</span><br></pre></td></tr></table></figure><p>More info: <a href="https://gulpjs.com/" target="_blank" rel="noopener">Gulp</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/02/08/hello-world/index.jpg&quot; alt=&quot;一切的开始&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a
      
    
    </summary>
    
    
  </entry>
  
</feed>
